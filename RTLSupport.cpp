#include "RTLSupport.h"

enum class UnicodeCategory
{
    UppercaseLetter = 0,
    LowercaseLetter = 1,
    TitlecaseLetter = 2,
    ModifierLetter = 3,
    OtherLetter = 4,
    NonSpacingMark = 5,
    SpacingCombiningMark = 6,
    EnclosingMark = 7,
    DecimalDigitNumber = 8,
    LetterNumber = 9,
    OtherNumber = 10,
    SpaceSeparator = 11,
    LineSeparator = 12,
    ParagraphSeparator = 13,
    Control = 14,
    Format = 15,
    Surrogate = 16,
    PrivateUse = 17,
    ConnectorPunctuation = 18,
    DashPunctuation = 19,
    OpenPunctuation = 20,
    ClosePunctuation = 21,
    InitialQuotePunctuation = 22,
    FinalQuotePunctuation = 23,
    OtherPunctuation = 24,
    MathSymbol = 25,
    CurrencySymbol = 26,
    ModifierSymbol = 27,
    OtherSymbol = 28,
    OtherNotAssigned = 29,
    ErrorCategory=30,
};

struct TashkeelLocation
{
    char32_t Tashkeel;
    int Position;

    TashkeelLocation(TashkeelCharacters tashkeel, int position)
    {
        Tashkeel = (char32_t) tashkeel;
        Position = position;
    }
};

class CharUtil
{
private:
    static bool IsLatin1(char32_t c){
        return c < 256;
    }
    static bool IsAscii(char32_t c){
        return c <= 0x7f;
    }
    static bool IsWhiteSpaceLatin1(char32_t c)
    {
        return (Latin1CharInfo[c] & IsWhiteSpaceFlag) != 0;
    }
    static bool IsInRange(UnicodeCategory c, UnicodeCategory min, UnicodeCategory max){
        return ((unsigned int)c - (unsigned int)min) <= ((unsigned int)max - (unsigned int)min);
    }
    static bool CheckSymbol(UnicodeCategory uc)
    {
        return IsInRange(uc, UnicodeCategory::MathSymbol, UnicodeCategory::OtherSymbol);
    }
    static UnicodeCategory GetLatin1UnicodeCategory(char32_t c)
    {
        return (UnicodeCategory)(Latin1CharInfo[c] & UnicodeCategoryMask);
    }
    static bool CheckLetter(UnicodeCategory uc)
    {
        return IsInRange(uc, UnicodeCategory::UppercaseLetter, UnicodeCategory::OtherLetter);
    }
    static bool CheckPunctuation(UnicodeCategory uc)
    {
        return IsInRange(uc, UnicodeCategory::ConnectorPunctuation, UnicodeCategory::OtherPunctuation);
    }
    static unsigned int GetCategoryCasingTableOffsetNoBoundsChecks(char32_t ch)
    {
        unsigned int index1 = CategoryCasingLevel1Index[ch >> 9];
        unsigned int offset = (index1 << 6) + (ch >> 3) & 0x3E;
        unsigned int index2 = CategoryCasingLevel2Index[offset] | CategoryCasingLevel2Index[offset+1] << 8;
        unsigned int index3 = CategoryCasingLevel3Index[(index2 << 4) + (ch & 0x0F)];
        return index3;
    }
    static UnicodeCategory GetUnicodeCategory(char32_t ch)
    {
        if(ch > 0x10FFFF) return UnicodeCategory::ErrorCategory;
        unsigned int offset = GetCategoryCasingTableOffsetNoBoundsChecks(ch);
        return (UnicodeCategory)(CategoriesValues[offset] & 0x1F);
    }
    static bool GetIsWhiteSpace(char32_t ch)
    {
        if(ch > 0x10FFFF) return false;
        unsigned int offset = GetCategoryCasingTableOffsetNoBoundsChecks(ch);
        return CategoriesValues[offset] < 0;
    }
public:
    static bool IsSymbol(char32_t c){
        if (IsLatin1(c)){
            return CheckSymbol(GetLatin1UnicodeCategory(c));
        }
        return CheckSymbol(GetUnicodeCategory(c));
    }
    static bool IsLetter(char32_t c){
        if (IsAscii(c)){
            return (Latin1CharInfo[c] & (IsUpperCaseLetterFlag | IsLowerCaseLetterFlag)) != 0;
        }
        return CheckLetter(GetUnicodeCategory(c));
    }
    static bool IsPunctuation(char32_t c){
        if (IsLatin1(c)){
            return CheckPunctuation(GetLatin1UnicodeCategory(c));
        }
        return CheckPunctuation(GetUnicodeCategory(c));
    }
    static bool IsWhiteSpace(char32_t c){
        if (IsLatin1(c)){
            return IsWhiteSpaceLatin1(c);
        }
        return GetIsWhiteSpace(c);
    }
    static void UTF8ToUTF32(const std::string& utf8, std::u32string& outUtf32)
    {
        try
        {
            wstring_convert<codecvt_utf8<char32_t>, char32_t> utf8_ucs4_cvt;
            outUtf32 = utf8_ucs4_cvt.from_bytes(utf8);
        }
        catch (std::range_error& exception)
        {
            outUtf32.clear();
            printf("UTF8ToUTF32 ERROR %s",utf8.c_str());
        }
    }
    static void UTF32ToUTF8(const std::u32string& utf32, std::string& outUtf8)
    {
        try
        {
            wstring_convert<std::codecvt_utf8<char32_t>, char32_t> utf8_ucs4_cvt;
            outUtf8 = utf8_ucs4_cvt.to_bytes(utf32);
        }
        catch (std::range_error& exception)
        {
            outUtf8.clear();
            printf("UTF32ToUTF8 ERROR");
        }
    }
    static unsigned char Latin1CharInfo[256];
    static unsigned char CategoryCasingLevel1Index[2176];
    static unsigned char CategoryCasingLevel2Index[6272];
    static unsigned char CategoryCasingLevel3Index[11680];
    static unsigned char CategoriesValues[232];
    static const unsigned char IsWhiteSpaceFlag = 0x80;
    static const unsigned char IsUpperCaseLetterFlag = 0x40;
    static const unsigned char IsLowerCaseLetterFlag = 0x20;
    static const unsigned char UnicodeCategoryMask = 0x1F;
};

class FastStringBuilder {
    // Using fields to be as efficient as possible
private:
    int length;
    char32_t* array;
    int capacity;
public:
    int Length(void){
        return length;
    }

    void Length(int value){
        if (value <= length) length = value;
    }

    FastStringBuilder(int capacity) {
        if (capacity < 0) {
            printf("FastStringBuilder capacity Error");
            return;
        }

        this->capacity = capacity;
        length = 0;
        array = new char32_t[capacity];
    }

    inline int Get(int index) {
        return array[index];
    }

    inline void Set(int index, int ch) {
        array[index] = ch;
    }

    void SetValue(const string &text) {
        int len = 0;
        length = text.length();
        EnsureCapacity(length, false);

        std::u32string utf32String;
        CharUtil::UTF8ToUTF32(text, utf32String);
        for (int i = 0; i < utf32String.length(); i++) {
            array[len++] = utf32String[i];
        }
        array[len] = 0;
        length = len;
    }

    void SetValue(FastStringBuilder &other) {
        EnsureCapacity(other.length, false);
        Copy(other.array, array,other.length);
        length = other.length;
    }

    void Append(char32_t ch) {
        length++;
        if (capacity < length)
            EnsureCapacity(length, true);

        array[length - 1] = ch;
    }

    void Insert(int pos, FastStringBuilder &str, int offset, int count) {
        if (&str == this) return;
        if (count == 0) return;

        length += count;
        EnsureCapacity(length, true);

        for (int i = length - count - 1; i >= pos; i--) {
            array[i + count] = array[i];
        }

        for (int i = 0; i < count; i++) {
            array[pos + i] = str.array[offset + i];
        }
    }

    void Insert(int pos, FastStringBuilder &str) {
        Insert(pos, str, 0, str.length);
    }

    void Insert(int pos, int ch) {
        length++;
        EnsureCapacity(length, true);

        for (int i = length - 2; i >= pos; i--)
            array[i + 1] = array[i];

        array[pos] = ch;
    }

    void RemoveAll(char32_t character) {
        int j = 0; // write index
        int i = 0; // read index
        for (; i < length; i++) {
            if (array[i] == character) continue;

            array[j] = array[i];
            j++;
        }

        length = j;
    }

    void Remove(int start, int len) {
        for (int i = start; i < this->length - len; i++) {
            array[i] = array[i + len];
        }

        this->length -= len;
    }

    void Reverse(int startIndex, int len) {
        for (int i = 0; i < length / 2; i++) {
            int firstIndex = startIndex + i;
            int secondIndex = startIndex + len - i - 1;

            int first = array[firstIndex];
            int second = array[secondIndex];

            array[firstIndex] = second;
            array[secondIndex] = first;
        }
    }

    void Reverse() {
        Reverse(0, length);
    }

    void Substring(FastStringBuilder &output, int start, int len) {
        output.length = 0;
        for (int i = 0; i < len; i++)
            output.Append(array[start + i]);
    }

    string ToString() {
        string str;
        if(length+1 < capacity){
            array[length] = 0;
        }
        std::u32string utf32String = (char32_t*)array;
        CharUtil::UTF32ToUTF8(utf32String,str);
        return str;
    }

    void Replace(char32_t oldChar, char32_t newChar) {
        for (int i = 0; i < length; i++) {
            if (array[i] == oldChar)
                array[i] = newChar;
        }
    }

    void Replace(FastStringBuilder &oldStr, FastStringBuilder &newStr)
    {
        for (int i = 0; i < length; i++)
        {
            bool match = true;
            for (int j = 0; j < oldStr.Length(); j++)
            {
                if (array[i + j] != oldStr.Get(j))
                {
                    match = false;
                    break;
                }
            }

            if (!match) continue;

            if (oldStr.Length() == newStr.Length())
            {
                for (int k = 0; k < oldStr.Length(); k++)
                {
                    array[i + k] = newStr.Get(k);
                }
            }
            else if (oldStr.Length() < newStr.Length())
            {
                // We need to expand capacity
                int diff = newStr.Length() - oldStr.Length();
                length += diff;
                EnsureCapacity(length, true);

                // Move everything forward by difference of length
                for (int k = length - diff - 1; k >= i + oldStr.Length(); k--)
                {
                    array[k + diff] = array[k];
                }

                // Start writing new string
                for (int k = 0; k < newStr.Length(); k++)
                {
                    array[i + k] = newStr.Get(k);
                }
            }
            else
            {
                // We need to shrink
                int diff = oldStr.Length() - newStr.Length();

                // Move everything backwards by diff
                for (int k = i + diff; k < length - diff; k++)
                {
                    array[k] = array[k + diff];
                }

                for (int k = 0; k < newStr.Length(); k++)
                {
                    array[i + k] = newStr.Get(k);
                }

                length -= diff;
            }

            i += newStr.Length();
        }
    }

    void Clear() {
        length = 0;
    }

    void EnsureCapacity(int cap, bool keepValues) {
        if (capacity >= cap+1)
            return;

        if (capacity == 0)
            capacity = 1;

        while (capacity < cap+1)
            capacity *= 2;

        if (keepValues) {
            char32_t* newArray = new char32_t[capacity];
            Copy(array, newArray,length);
            delete array;
            array = newArray;
        } else {
            delete array;
            array = new char32_t[capacity];
        }
    }

    void Copy(char32_t* src, char32_t* dst,int len) {
        for (int i = 0; i < len; i++)
            dst[i] = src[i];
    }
};

class TextUtils {
public:
    static bool IsNumber(char32_t ch, bool preserveNumbers, bool farsi)
    {
        if (preserveNumbers)
            return IsEnglishNumber(ch);

        if (farsi)
            return IsFarsiNumber(ch);

        return IsHinduNumber(ch);
    }

    static bool IsEnglishNumber(char32_t ch)
    {
        return ch >= (char32_t) EnglishNumbers::Zero && ch <= (char32_t) EnglishNumbers::Nine;
    }

    static bool IsFarsiNumber(char32_t ch)
    {
        return ch >= (char32_t) FarsiNumbers::Zero && ch <= (char32_t) FarsiNumbers::Nine;
    }

    static bool IsHinduNumber(char32_t ch)
    {
        return ch >= (char32_t) HinduNumbers::Zero && ch <= (char32_t) HinduNumbers::Nine;
    }

    static bool IsEnglishLetter(char32_t ch)
    {
        return (ch >= (char32_t)LetterRange::UpperCaseA && ch <= (char32_t)LetterRange::UpperCaseZ)
        || (ch >= (char32_t)LetterRange::LowerCaseA && ch <= (char32_t)LetterRange::LowerCaseZ);
    }

    static bool IsHebrewCharacter(char32_t ch) {
        return ch >= (char32_t)LetterRange::HebrewLow && ch <= (char32_t)LetterRange::HebrewHigh;
    }

    static bool IsArabicCharacter(char32_t ch) {
        return (ch >= (char32_t)LetterRange::ArabicBaseBlockLow && ch <= (char32_t)LetterRange::ArabicBaseBlockHigh)
        || (ch >= (char32_t)LetterRange::ArabicExtendedABlockLow && ch <= (char32_t)LetterRange::ArabicExtendedABlockHigh)
        || (ch >= (char32_t)LetterRange::ArabicExtendedBBlockLow && ch <= (char32_t)LetterRange::ArabicExtendedBBlockHigh)
        || (ch >= (char32_t)LetterRange::ArabicPresentationFormsABlockLow && ch <= (char32_t)LetterRange::ArabicPresentationFormsABlockHigh)
        || (ch >= (char32_t)LetterRange::ArabicPresentationFormsBBlockLow && ch <= (char32_t)LetterRange::ArabicPresentationFormsBBlockHigh);
    }

    static bool IsRTLCharacter(char32_t ch) {
        if (IsHebrewCharacter(ch)) return true;
        if (IsArabicCharacter(ch)) return true;
        return false;
    }

    static bool IsGlyphFixedArabicCharacter(char32_t ch)
    {
        if (ch >= (char32_t)ArabicIsolatedLetters::Hamza && ch <= (char32_t)ArabicIsolatedLetters::Hamza + 3)
        {
            return true;
        }

        if (ch >= (char32_t)ArabicIsolatedLetters::Alef && ch <= (char32_t)ArabicIsolatedLetters::Alef + 3)
        {
            return true;
        }

        if (ch >= (char32_t)ArabicIsolatedLetters::AlefHamza &&
            ch <= (char32_t)ArabicIsolatedLetters::AlefHamza + 3)
        {
            return true;
        }

        if (ch >= (char32_t)ArabicIsolatedLetters::WawHamza && ch <= (char32_t)ArabicIsolatedLetters::WawHamza + 3)
        {
            return true;
        }

        if (ch >= (char32_t)ArabicIsolatedLetters::AlefMaksoor &&
            ch <= (char32_t)ArabicIsolatedLetters::AlefMaksoor + 3)
        {
            return true;
        }

        if (ch >= (char32_t)ArabicIsolatedLetters::AlefMaksura &&
            ch <= (char32_t)ArabicIsolatedLetters::AlefMaksura + 3)
        {
            return true;
        }

        if (ch >= (char32_t)ArabicIsolatedLetters::HamzaNabera &&
            ch <= (char32_t)ArabicIsolatedLetters::HamzaNabera + 3)
        {
            return true;
        }

        if (ch >= (char32_t)ArabicIsolatedLetters::Ba && ch <= (char32_t)ArabicIsolatedLetters::Ba + 3)
        {
            return true;
        }

        if (ch >= (char32_t)ArabicIsolatedLetters::Ta && ch <= (char32_t)ArabicIsolatedLetters::Ta + 3)
        {
            return true;
        }

        if (ch >= (char32_t)ArabicIsolatedLetters::Tha2 && ch <= (char32_t)ArabicIsolatedLetters::Tha2 + 3)
        {
            return true;
        }

        if (ch >= (char32_t)ArabicIsolatedLetters::Jeem && ch <= (char32_t)ArabicIsolatedLetters::Jeem + 3)
        {
            return true;
        }

        if (ch >= (char32_t)ArabicIsolatedLetters::H7aa && ch <= (char32_t)ArabicIsolatedLetters::H7aa + 3)
        {
            return true;
        }

        if (ch >= (char32_t)ArabicIsolatedLetters::Khaa2 && ch <= (char32_t)ArabicIsolatedLetters::Khaa2 + 3)
        {
            return true;
        }

        if (ch >= (char32_t)ArabicIsolatedLetters::Dal && ch <= (char32_t)ArabicIsolatedLetters::Dal + 3)
        {
            return true;
        }

        if (ch >= (char32_t)ArabicIsolatedLetters::Thal && ch <= (char32_t)ArabicIsolatedLetters::Thal + 3)
        {
            return true;
        }

        if (ch >= (char32_t)ArabicIsolatedLetters::Ra2 && ch <= (char32_t)ArabicIsolatedLetters::Ra2 + 3)
        {
            return true;
        }

        if (ch >= (char32_t)ArabicIsolatedLetters::Zeen && ch <= (char32_t)ArabicIsolatedLetters::Zeen + 3)
        {
            return true;
        }

        if (ch >= (char32_t)ArabicIsolatedLetters::Seen && ch <= (char32_t)ArabicIsolatedLetters::Seen + 3)
        {
            return true;
        }

        if (ch >= (char32_t)ArabicIsolatedLetters::Sheen && ch <= (char32_t)ArabicIsolatedLetters::Sheen + 3)
        {
            return true;
        }

        if (ch >= (char32_t)ArabicIsolatedLetters::S9a && ch <= (char32_t)ArabicIsolatedLetters::S9a + 3)
        {
            return true;
        }

        if (ch >= (char32_t)ArabicIsolatedLetters::Dha && ch <= (char32_t)ArabicIsolatedLetters::Dha + 3)
        {
            return true;
        }

        if (ch >= (char32_t)ArabicIsolatedLetters::T6a && ch <= (char32_t)ArabicIsolatedLetters::T6a + 3)
        {
            return true;
        }

        if (ch >= (char32_t)ArabicIsolatedLetters::T6ha && ch <= (char32_t)ArabicIsolatedLetters::T6ha + 3)
        {
            return true;
        }

        if (ch >= (char32_t)ArabicIsolatedLetters::Ain && ch <= (char32_t)ArabicIsolatedLetters::Ain + 3)
        {
            return true;
        }

        if (ch >= (char32_t)ArabicIsolatedLetters::Gain && ch <= (char32_t)ArabicIsolatedLetters::Gain + 3)
        {
            return true;
        }

        if (ch >= (char32_t)ArabicIsolatedLetters::Fa && ch <= (char32_t)ArabicIsolatedLetters::Fa + 3)
        {
            return true;
        }

        if (ch >= (char32_t)ArabicIsolatedLetters::Gaf && ch <= (char32_t)ArabicIsolatedLetters::Gaf + 3)
        {
            return true;
        }

        if (ch >= (char32_t)ArabicIsolatedLetters::Kaf && ch <= (char32_t)ArabicIsolatedLetters::Kaf + 3)
        {
            return true;
        }

        if (ch >= (char32_t)ArabicIsolatedLetters::Lam && ch <= (char32_t)ArabicIsolatedLetters::Lam + 3)
        {
            return true;
        }

        if (ch >= (char32_t)ArabicIsolatedLetters::Meem && ch <= (char32_t)ArabicIsolatedLetters::Meem + 3)
        {
            return true;
        }

        if (ch >= (char32_t)ArabicIsolatedLetters::Noon && ch <= (char32_t)ArabicIsolatedLetters::Noon + 3)
        {
            return true;
        }

        if (ch >= (char32_t)ArabicIsolatedLetters::Ha && ch <= (char32_t)ArabicIsolatedLetters::Ha + 3)
        {
            return true;
        }

        if (ch >= (char32_t)ArabicIsolatedLetters::Waw && ch <= (char32_t)ArabicIsolatedLetters::Waw + 3)
        {
            return true;
        }

        if (ch >= (char32_t)ArabicIsolatedLetters::Ya && ch <= (char32_t)ArabicIsolatedLetters::Ya + 3)
        {
            return true;
        }

        if (ch >= (char32_t)ArabicIsolatedLetters::AlefMad && ch <= (char32_t)ArabicIsolatedLetters::AlefMad + 3)
        {
            return true;
        }

        if (ch >= (char32_t)ArabicIsolatedLetters::TaMarboota &&
            ch <= (char32_t)ArabicIsolatedLetters::TaMarboota + 3)
        {
            return true;
        }

        if (ch >= (char32_t)ArabicIsolatedLetters::PersianPe &&
            ch <= (char32_t)ArabicIsolatedLetters::PersianPe + 3)
        {
            return true;
        }

        if (ch >= (char32_t)ArabicIsolatedLetters::PersianYa &&
            ch <= (char32_t)ArabicIsolatedLetters::PersianYa + 3)
        {
            return true;
        }

        if (ch >= (char32_t)ArabicIsolatedLetters::PersianChe &&
            ch <= (char32_t)ArabicIsolatedLetters::PersianChe + 3)
        {
            return true;
        }

        if (ch >= (char32_t)ArabicIsolatedLetters::PersianZe &&
            ch <= (char32_t)ArabicIsolatedLetters::PersianZe + 3)
        {
            return true;
        }

        if (ch >= (char32_t)ArabicIsolatedLetters::PersianGaf &&
            ch <= (char32_t)ArabicIsolatedLetters::PersianGaf + 3)
        {
            return true;
        }

        if (ch >= (char32_t)ArabicIsolatedLetters::PersianGaf2 &&
            ch <= (char32_t)ArabicIsolatedLetters::PersianGaf2 + 3)
        {
            return true;
        }

        // Special Lam Alef
        if (ch == 0xFEF3)
        {
            return true;
        }

        if (ch == 0xFEF5)
        {
            return true;
        }

        if (ch == 0xFEF7)
        {
            return true;
        }

        if (ch == 0xFEF9)
        {
            return true;
        }

        switch (ch)
        {
            case (char32_t)ArabicGeneralLetters::Hamza:
            case (char32_t)ArabicGeneralLetters::Alef:
            case (char32_t)ArabicGeneralLetters::AlefHamza:
            case (char32_t)ArabicGeneralLetters::WawHamza:
            case (char32_t)ArabicGeneralLetters::AlefMaksoor:
            case (char32_t)ArabicGeneralLetters::AlefMaksura:
            case (char32_t)ArabicGeneralLetters::HamzaNabera:
            case (char32_t)ArabicGeneralLetters::Ba:
            case (char32_t)ArabicGeneralLetters::Ta:
            case (char32_t)ArabicGeneralLetters::Tha2:
            case (char32_t)ArabicGeneralLetters::Jeem:
            case (char32_t)ArabicGeneralLetters::H7aa:
            case (char32_t)ArabicGeneralLetters::Khaa2:
            case (char32_t)ArabicGeneralLetters::Dal:
            case (char32_t)ArabicGeneralLetters::Thal:
            case (char32_t)ArabicGeneralLetters::Ra2:
            case (char32_t)ArabicGeneralLetters::Zeen:
            case (char32_t)ArabicGeneralLetters::Seen:
            case (char32_t)ArabicGeneralLetters::Sheen:
            case (char32_t)ArabicGeneralLetters::S9a:
            case (char32_t)ArabicGeneralLetters::Dha:
            case (char32_t)ArabicGeneralLetters::T6a:
            case (char32_t)ArabicGeneralLetters::T6ha:
            case (char32_t)ArabicGeneralLetters::Ain:
            case (char32_t)ArabicGeneralLetters::Gain:
            case (char32_t)ArabicGeneralLetters::Fa:
            case (char32_t)ArabicGeneralLetters::Gaf:
            case (char32_t)ArabicGeneralLetters::Kaf:
            case (char32_t)ArabicGeneralLetters::Lam:
            case (char32_t)ArabicGeneralLetters::Meem:
            case (char32_t)ArabicGeneralLetters::Noon:
            case (char32_t)ArabicGeneralLetters::Ha:
            case (char32_t)ArabicGeneralLetters::Waw:
            case (char32_t)ArabicGeneralLetters::Ya:
            case (char32_t)ArabicGeneralLetters::AlefMad:
            case (char32_t)ArabicGeneralLetters::TaMarboota:
            case (char32_t)ArabicGeneralLetters::PersianPe:
            case (char32_t)ArabicGeneralLetters::PersianChe:
            case (char32_t)ArabicGeneralLetters::PersianZe:
            case (char32_t)ArabicGeneralLetters::PersianGaf:
            case (char32_t)ArabicGeneralLetters::PersianGaf2:
            case (char32_t)ArabicGeneralLetters::PersianYa:
            case (char32_t)ArabicGeneralLetters::ArabicTatweel:
            case (char32_t)ArabicGeneralLetters::ZeroWidthNoJoiner:
                return true;
        }

        return false;
    }
    
    static bool IsRTLInput(string &input)
    {
        bool insideTag = false;
        std::u32string utf32String;
        CharUtil::UTF8ToUTF32(input, utf32String);
        for (int i = 0; i < utf32String.length(); i++) {
            char32_t character = utf32String[i];
            switch (character)
            {
                case '<':
                    insideTag = true;
                    continue;

                case '>':
                    insideTag = false;
                    continue;
            }

            if (insideTag)
            {
                continue;
            }

            if (CharUtil::IsLetter(character))
            {
                return IsRTLCharacter(character);
            }
        }

        return false;
    }
};


RTLSupport::RTLSupport()
{
    inputBuilder = new FastStringBuilder(2048);
    glyphFixerOutput = new FastStringBuilder(2048);
    initMapList();
}

RTLSupport::~RTLSupport()
{
}

RTLSupport& RTLSupport::getInstance() {
    static RTLSupport instance;
    return instance;
}

bool RTLSupport::IsUnicode16Char(int ch) {
    return ch < 0xFFFF;
}

// Wrappers for TextUtil methods
bool RTLSupport::IsRTLCharacter(int ch) {
    if (!IsUnicode16Char(ch)) return false;
    return TextUtils::IsRTLCharacter((char32_t)ch);
}

bool RTLSupport::IsEnglishLetter(int ch) {
    if (!IsUnicode16Char(ch)) return false;
    return TextUtils::IsEnglishLetter((char32_t)ch);
}

bool RTLSupport::IsNumber(int ch, bool preserveNumbers, bool farsi) {
    if (!IsUnicode16Char(ch)) return false;
    return TextUtils::IsNumber((char32_t)ch, preserveNumbers, farsi);
}

bool RTLSupport::IsSymbol(int ch) {
    if (!IsUnicode16Char(ch)) return false;
    return CharUtil::IsSymbol((char32_t)ch);
}

bool RTLSupport::IsLetter(int ch) {
    if (!IsUnicode16Char(ch)) return false;
    return CharUtil::IsLetter((char32_t)ch);
}

bool RTLSupport::IsPunctuation(int ch) {
    if (!IsUnicode16Char(ch)) return false;
    return CharUtil::IsPunctuation((char32_t)ch);
}

bool RTLSupport::IsWhiteSpace(int ch) {
    if (!IsUnicode16Char(ch)) return false;
    return CharUtil::IsWhiteSpace((char32_t)ch);
}

char32_t RTLSupport::Convert(char32_t toBeConverted)
{
    const auto iter = MapList.find(toBeConverted);
    if( iter != MapList.end())
        return iter->second;
    return toBeConverted;
}

void RTLSupport::initMapList()
{
    char32_t arabicGeneralLetters[] = {0x0621,0x0627,0x0623,0x0624,0x0625,0x649,0x0626,0x0628,0x062A,0x062B,0x062C,0x062D,0x062E,0x062F,0x0630,0x0631,0x0632,0x0633,0x0634,0x0635,0x0636,0x0637,0x0638,0x0639,0x063A,0x0641,0x0642,0x0643,0x0644,0x0645,0x0646,0x0647,0x0648,0x064A,0x0622,0x0629,0x6CC,0x067E,0x0686,0x0698,0x06AF,0x06A9};
    char32_t arabicIsolatedLetters[] = {0xFE80,0xFE8D,0xFE83,0xFE85,0xFE87,0xFEEF,0xFE89,0xFE8F,0xFE95,0xFE99,0xFE9D,0xFEA1,0xFEA5,0xFEA9,0xFEAB,0xFEAD,0xFEAF,0xFEB1,0xFEB5,0xFEB9,0xFEBD,0xFEC1,0xFEC5,0xFEC9,0xFECD,0xFED1,0xFED5,0xFED9,0xFEDD,0xFEE1,0xFEE5,0xFEE9,0xFEED,0xFEF1,0xFE81,0xFE93,0xFBFC,0xFB56,0xFB7A,0xFB8A,0xFB92,0xFB8E};
    int len = sizeof(arabicGeneralLetters)/ sizeof(arabicGeneralLetters[0]);
    for(int i=0; i<len ;i++){
        char32_t letter = arabicGeneralLetters[i];
        MapList[letter] = arabicIsolatedLetters[i];
    }

    TashkeelCharactersMap[(char32_t)TashkeelCharacters::Fathan] = (char32_t)0;
    TashkeelCharactersMap[(char32_t)TashkeelCharacters::Dammatan] = (char32_t)TashkeelCharacters::ShaddaWithDammatanIsolatedForm;
    TashkeelCharactersMap[(char32_t)TashkeelCharacters::Kasratan] = (char32_t)TashkeelCharacters::ShaddaWithKasratanIsolatedForm;
    TashkeelCharactersMap[(char32_t)TashkeelCharacters::Fatha] = (char32_t)TashkeelCharacters::ShaddaWithFathaIsolatedForm;
    TashkeelCharactersMap[(char32_t)TashkeelCharacters::Damma] = (char32_t)TashkeelCharacters::ShaddaWithDammaIsolatedForm;
    TashkeelCharactersMap[(char32_t)TashkeelCharacters::Kasra] = (char32_t)TashkeelCharacters::ShaddaWithKasraIsolatedForm;
    TashkeelCharactersMap[(char32_t)TashkeelCharacters::Shadda] = (char32_t)0;
    TashkeelCharactersMap[(char32_t)TashkeelCharacters::Sukun] = (char32_t)0;
    TashkeelCharactersMap[(char32_t)TashkeelCharacters::MaddahAbove] = (char32_t)0;
    TashkeelCharactersMap[(char32_t)TashkeelCharacters::SuperscriptAlef] = (char32_t)TashkeelCharacters::ShaddaWithSuperscriptAlefIsolatedForm;
    TashkeelCharactersMap[(char32_t)TashkeelCharacters::ShaddaWithDammatanIsolatedForm] = (char32_t)0;
    TashkeelCharactersMap[(char32_t)TashkeelCharacters::ShaddaWithKasratanIsolatedForm] = (char32_t)0;
    TashkeelCharactersMap[(char32_t)TashkeelCharacters::ShaddaWithFathaIsolatedForm] = (char32_t)0;
    TashkeelCharactersMap[(char32_t)TashkeelCharacters::ShaddaWithDammaIsolatedForm] = (char32_t)0;
    TashkeelCharactersMap[(char32_t)TashkeelCharacters::ShaddaWithKasraIsolatedForm] = (char32_t)0;
    TashkeelCharactersMap[(char32_t)TashkeelCharacters::ShaddaWithSuperscriptAlefIsolatedForm] = (char32_t)0;

    EnglishToFarsiNumberMap[(char32_t)EnglishNumbers::Zero]  =(char32_t)FarsiNumbers::Zero;
    EnglishToFarsiNumberMap[(char32_t)EnglishNumbers::One]   =(char32_t)FarsiNumbers::One;
    EnglishToFarsiNumberMap[(char32_t)EnglishNumbers::Two]   =(char32_t)FarsiNumbers::Two;
    EnglishToFarsiNumberMap[(char32_t)EnglishNumbers::Three] =(char32_t)FarsiNumbers::Three;
    EnglishToFarsiNumberMap[(char32_t)EnglishNumbers::Four]  =(char32_t)FarsiNumbers::Four;
    EnglishToFarsiNumberMap[(char32_t)EnglishNumbers::Five]  =(char32_t)FarsiNumbers::Five;
    EnglishToFarsiNumberMap[(char32_t)EnglishNumbers::Six]   =(char32_t)FarsiNumbers::Six;
    EnglishToFarsiNumberMap[(char32_t)EnglishNumbers::Seven] =(char32_t)FarsiNumbers::Seven;
    EnglishToFarsiNumberMap[(char32_t)EnglishNumbers::Eight] =(char32_t)FarsiNumbers::Eight;
    EnglishToFarsiNumberMap[(char32_t)EnglishNumbers::Nine]  =(char32_t)FarsiNumbers::Nine;
    EnglishToHinduNumberMap[(char32_t)EnglishNumbers::Zero]  =(char32_t)HinduNumbers::Zero;
    EnglishToHinduNumberMap[(char32_t)EnglishNumbers::One]   =(char32_t)HinduNumbers::One;
    EnglishToHinduNumberMap[(char32_t)EnglishNumbers::Two]   =(char32_t)HinduNumbers::Two;
    EnglishToHinduNumberMap[(char32_t)EnglishNumbers::Three] =(char32_t)HinduNumbers::Three;
    EnglishToHinduNumberMap[(char32_t)EnglishNumbers::Four]  =(char32_t)HinduNumbers::Four;
    EnglishToHinduNumberMap[(char32_t)EnglishNumbers::Five]  =(char32_t)HinduNumbers::Five;
    EnglishToHinduNumberMap[(char32_t)EnglishNumbers::Six]   =(char32_t)HinduNumbers::Six;
    EnglishToHinduNumberMap[(char32_t)EnglishNumbers::Seven] =(char32_t)HinduNumbers::Seven;
    EnglishToHinduNumberMap[(char32_t)EnglishNumbers::Eight] =(char32_t)HinduNumbers::Eight;
    EnglishToHinduNumberMap[(char32_t)EnglishNumbers::Nine]  =(char32_t)HinduNumbers::Nine;

    MirroredCharsMap['('] = ')',
    MirroredCharsMap[')'] = '(',
    MirroredCharsMap[0xBB] = 0xAB;//«»
    MirroredCharsMap[0xAB] = 0xBB;//«»
}

string RTLSupport::FixRTL(const string &input,bool farsi,bool fixTextTags,bool preserveNumbers)
{
    FastStringBuilder output(2048);
    inputBuilder->SetValue(input);
    RemoveTashkeel(*inputBuilder);
    // The shape of the letters in shapeFixedLetters is fixed according to their position in word. But the flow of the text is not fixed.
    GlyphFix(*inputBuilder, *glyphFixerOutput, preserveNumbers, farsi, fixTextTags);
    //Restore tashkeel to their places.
    RestoreTashkeel(*glyphFixerOutput);
    
    FixShaddaCombinations(*glyphFixerOutput);
    // Fix flow of the text and put the result in FinalLetters field
    LigatureFix(*glyphFixerOutput, output, farsi, fixTextTags, preserveNumbers);
    // if (fixTextTags)
    // {
    //     RichTextFixer.Fix(output);
    // }
    inputBuilder->Clear();
    return output.ToString();
}

int RTLSupport::GetTashkeelConvert(char32_t toBeConverted)
{
    const auto iter = TashkeelCharactersMap.find(toBeConverted);
    if( iter != MapList.end())
        return iter->second;
    return -1;
}


void RTLSupport::RemoveTashkeel(FastStringBuilder &input)
{
    TashkeelLocations.clear();
    int j = 0; // write index
    int len = input.Length();
    for (int i = 0; i < len; i++)
    {
        int curChar = input.Get(i);
        int convertChar = GetTashkeelConvert(curChar);
        if (IsUnicode16Char(curChar) && convertChar >= 0)
        {
            TashkeelLocations.push_back(TashkeelLocation((TashkeelCharacters)curChar, i));
        }
        else
        {
            input.Set(j, curChar);
            j++;
        }
    }
    input.Length(j);
}

void RTLSupport::RestoreTashkeel(FastStringBuilder &letters)
{
    for(int i=0;i<TashkeelLocations.size();i++)
    {
        TashkeelLocation location = TashkeelLocations[i];
        letters.Insert(location.Position, location.Tashkeel);
    }
}

void RTLSupport::FixShaddaCombinations(FastStringBuilder &input)
{
    int j = 0; // write index
    int i = 0; // read index
    while (i < input.Length())
    {
        int curChar = input.Get(i);
        int nextChar = i < input.Length() - 1 ? input.Get(i + 1) : 0;
        int convertChar = GetTashkeelConvert(nextChar);
        if (curChar == (int)TashkeelCharacters::Shadda && convertChar > 0)
        {
            input.Set(j, convertChar);
            j++;
            i += 2;
        }
        else
        {
            input.Set(j, curChar);
            j++;
            i++;
        }
    }
    input.Length(j);
}

void RTLSupport::GlyphFix(FastStringBuilder &input, FastStringBuilder &output, bool preserveNumbers, bool farsi, bool fixTextTags)
{
    FixYah(input, farsi);

    output.SetValue(input);

    for (int i = 0; i < input.Length(); i++)
    {
        bool skipNext = false;
        int iChar = input.Get(i);

        // For special Lam Letter connections.
        if (iChar == (int)ArabicGeneralLetters::Lam)
        {
            if (i < input.Length() - 1)
            {
                skipNext = HandleSpecialLam(input, output, i);
                if (skipNext)
                    iChar = output.Get(i);
            }
        }

        // We don't want to fix tatweel or zwnj character
        if (iChar == (int)ArabicGeneralLetters::ArabicTatweel ||
            iChar == (int)ArabicGeneralLetters::ZeroWidthNoJoiner)
        {
            continue;
        }

        if (iChar < 0xFFFF && TextUtils::IsGlyphFixedArabicCharacter((char32_t)iChar))
        {
            char32_t converted = Convert((char32_t)iChar);

            if (IsMiddleLetter(input, i))
            {
                output.Set(i, (char32_t)(converted + 3));
            } else if (IsFinishingLetter(input, i))
            {
                output.Set(i, (char32_t)(converted + 1));
            } else if (IsLeadingLetter(input, i))
            {
                output.Set(i, (char32_t)(converted + 2));
            }
        }

        // If this letter as Lam and special Lam-Alef connection was made, We want to skip the Alef
        // (Lam-Alef occupies 1 space)
        if (skipNext)
        {
            i++;
        }
    }

    if (!preserveNumbers)
    {
        if (fixTextTags)
        {
            FixNumbersOutsideOfTags(output, farsi);
        } else
        {
            FixNumbers(output, farsi);
        }
    }
}

void RTLSupport::FixYah(FastStringBuilder &text, bool farsi)
{
    for (int i = 0; i < text.Length(); i++)
    {
        if (farsi && text.Get(i) == (int)ArabicGeneralLetters::Ya)
        {
            text.Set(i, (char32_t)ArabicGeneralLetters::PersianYa);
        } else if (farsi == false && text.Get(i) == (int)ArabicGeneralLetters::PersianYa)
        {
            text.Set(i, (char32_t)ArabicGeneralLetters::Ya);
        }
    }
}

bool RTLSupport::HandleSpecialLam(FastStringBuilder &input, FastStringBuilder &output, int i)
{
    bool isFixed;
    switch (input.Get(i + 1))
    {
        case (char32_t)ArabicGeneralLetters::AlefMaksoor:
            output.Set(i, (char32_t)0xFEF7);
            isFixed = true;
            break;
        case (char32_t)ArabicGeneralLetters::Alef:
            output.Set(i, (char32_t)0xFEF9);
            isFixed = true;
            break;
        case (char32_t)ArabicGeneralLetters::AlefHamza:
            output.Set(i, (char32_t)0xFEF5);
            isFixed = true;
            break;
        case (char32_t)ArabicGeneralLetters::AlefMad:
            output.Set(i, (char32_t)0xFEF3);
            isFixed = true;
            break;
        default:
            isFixed = false;
            break;
    }

    if (isFixed)
    {
        output.Set(i + 1, (char32_t)0xFFFF);
    }

    return isFixed;
}

void RTLSupport::FixNumbers(FastStringBuilder &text, bool farsi)
{
    text.Replace((char32_t)EnglishNumbers::Zero, farsi ? (char32_t)FarsiNumbers::Zero : (char32_t)HinduNumbers::Zero);
    text.Replace((char32_t)EnglishNumbers::One, farsi ? (char32_t)FarsiNumbers::One : (char32_t)HinduNumbers::One);
    text.Replace((char32_t)EnglishNumbers::Two, farsi ? (char32_t)FarsiNumbers::Two : (char32_t)HinduNumbers::Two);
    text.Replace((char32_t)EnglishNumbers::Three, farsi ? (char32_t)FarsiNumbers::Three : (char32_t)HinduNumbers::Three);
    text.Replace((char32_t)EnglishNumbers::Four, farsi ? (char32_t)FarsiNumbers::Four : (char32_t)HinduNumbers::Four);
    text.Replace((char32_t)EnglishNumbers::Five, farsi ? (char32_t)FarsiNumbers::Five : (char32_t)HinduNumbers::Five);
    text.Replace((char32_t)EnglishNumbers::Six, farsi ? (char32_t)FarsiNumbers::Six : (char32_t)HinduNumbers::Six);
    text.Replace((char32_t)EnglishNumbers::Seven, farsi ? (char32_t)FarsiNumbers::Seven : (char32_t)HinduNumbers::Seven);
    text.Replace((char32_t)EnglishNumbers::Eight, farsi ? (char32_t)FarsiNumbers::Eight : (char32_t)HinduNumbers::Eight);
    text.Replace((char32_t)EnglishNumbers::Nine, farsi ? (char32_t)FarsiNumbers::Nine : (char32_t)HinduNumbers::Nine);
}

void RTLSupport::FixNumbersOutsideOfTags(FastStringBuilder &text, bool farsi)
{
    for (int i = 0; i < text.Length(); i++)
    {
        auto iChar = text.Get(i);
        // skip valid tags
        if (iChar == '<')
        {
            bool sawValidTag = false;
            for (int j = i + 1; j < text.Length(); j++)
            {
                int jChar = text.Get(j);
                if ((j == i + 1 && jChar == ' ') || jChar == '<')
                {
                    break;
                } else if (jChar == '>')
                {
                    i = j;
                    sawValidTag = true;
                    break;
                }
            }

            if (sawValidTag) continue;
        }

        const auto iter = EnglishToFarsiNumberMap.find(iChar);
        if( iter != EnglishToFarsiNumberMap.end())
        {
            text.Set(i, farsi ? EnglishToFarsiNumberMap[iChar] : EnglishToHinduNumberMap[iChar]);
        }
    }
}

bool RTLSupport::IsLeadingLetter(FastStringBuilder &letters, int index)
{
    auto currentIndexLetter = letters.Get(index);

    int previousIndexLetter = 0;
    if (index != 0)
        previousIndexLetter = letters.Get(index - 1);

    int nextIndexLetter = 0;
    if (index < letters.Length() - 1)
        nextIndexLetter = letters.Get(index + 1);

    bool isPreviousLetterNonConnectable = index == 0 ||
                                          (previousIndexLetter < 0xFFFF && !TextUtils::IsGlyphFixedArabicCharacter((char32_t)previousIndexLetter)) ||
                                          previousIndexLetter == (int)ArabicGeneralLetters::Alef ||
                                          previousIndexLetter == (int)ArabicGeneralLetters::Dal ||
                                          previousIndexLetter == (int)ArabicGeneralLetters::Thal ||
                                          previousIndexLetter == (int)ArabicGeneralLetters::Ra2 ||
                                          previousIndexLetter == (int)ArabicGeneralLetters::Zeen ||
                                          previousIndexLetter == (int)ArabicGeneralLetters::PersianZe ||
                                          previousIndexLetter == (int)ArabicGeneralLetters::Waw ||
                                          previousIndexLetter == (int)ArabicGeneralLetters::AlefMad ||
                                          previousIndexLetter == (int)ArabicGeneralLetters::AlefHamza ||
                                          previousIndexLetter == (int)ArabicGeneralLetters::Hamza ||
                                          previousIndexLetter == (int)ArabicGeneralLetters::AlefMaksoor ||
                                          previousIndexLetter == (int)ArabicGeneralLetters::ZeroWidthNoJoiner ||
                                          previousIndexLetter == (int)ArabicGeneralLetters::WawHamza ||
                                          previousIndexLetter == (int)ArabicIsolatedLetters::Alef ||
                                          previousIndexLetter == (int)ArabicIsolatedLetters::Dal ||
                                          previousIndexLetter == (int)ArabicIsolatedLetters::Thal ||
                                          previousIndexLetter == (int)ArabicIsolatedLetters::Ra2 ||
                                          previousIndexLetter == (int)ArabicIsolatedLetters::Zeen ||
                                          previousIndexLetter == (int)ArabicIsolatedLetters::PersianZe ||
                                          previousIndexLetter == (int)ArabicIsolatedLetters::Waw ||
                                          previousIndexLetter == (int)ArabicIsolatedLetters::AlefMad ||
                                          previousIndexLetter == (int)ArabicIsolatedLetters::AlefHamza ||
                                          previousIndexLetter == (int)ArabicIsolatedLetters::Hamza ||
                                          previousIndexLetter == (int)ArabicIsolatedLetters::AlefMaksoor;


    bool canThisLetterBeLeading = currentIndexLetter != ' ' &&
                                  currentIndexLetter != (int)ArabicGeneralLetters::Dal &&
                                  currentIndexLetter != (int)ArabicGeneralLetters::Thal &&
                                  currentIndexLetter != (int)ArabicGeneralLetters::Ra2 &&
                                  currentIndexLetter != (int)ArabicGeneralLetters::Zeen &&
                                  currentIndexLetter != (int)ArabicGeneralLetters::PersianZe &&
                                  currentIndexLetter != (int)ArabicGeneralLetters::Alef &&
                                  currentIndexLetter != (int)ArabicGeneralLetters::AlefHamza &&
                                  currentIndexLetter != (int)ArabicGeneralLetters::AlefMaksoor &&
                                  currentIndexLetter != (int)ArabicGeneralLetters::AlefMad &&
                                  currentIndexLetter != (int)ArabicGeneralLetters::WawHamza &&
                                  currentIndexLetter != (int)ArabicGeneralLetters::Waw &&
                                  currentIndexLetter != (int)ArabicGeneralLetters::ZeroWidthNoJoiner &&
                                  currentIndexLetter != (int)ArabicGeneralLetters::Hamza;

    bool isNextLetterConnectable = index < letters.Length() - 1 &&
                                   (nextIndexLetter < 0xFFFF && TextUtils::IsGlyphFixedArabicCharacter((char32_t)nextIndexLetter)) &&
                                   nextIndexLetter != (int)ArabicGeneralLetters::Hamza &&
                                   nextIndexLetter != (int)ArabicGeneralLetters::ZeroWidthNoJoiner;

    return isPreviousLetterNonConnectable &&
           canThisLetterBeLeading &&
           isNextLetterConnectable;
}

bool RTLSupport::IsFinishingLetter(FastStringBuilder &letters, int index)
{
    int currentIndexLetter = letters.Get(index);

    int previousIndexLetter = 0;
    if (index != 0)
        previousIndexLetter = letters.Get(index - 1);

    bool isPreviousLetterConnectable = index != 0 &&
                                       previousIndexLetter != ' ' &&
                                       previousIndexLetter != (int)ArabicGeneralLetters::Dal &&
                                       previousIndexLetter != (int)ArabicGeneralLetters::Thal &&
                                       previousIndexLetter != (int)ArabicGeneralLetters::Ra2 &&
                                       previousIndexLetter != (int)ArabicGeneralLetters::Zeen &&
                                       previousIndexLetter != (int)ArabicGeneralLetters::PersianZe &&
                                       previousIndexLetter != (int)ArabicGeneralLetters::Waw &&
                                       previousIndexLetter != (int)ArabicGeneralLetters::Alef &&
                                       previousIndexLetter != (int)ArabicGeneralLetters::AlefMad &&
                                       previousIndexLetter != (int)ArabicGeneralLetters::AlefHamza &&
                                       previousIndexLetter != (int)ArabicGeneralLetters::AlefMaksoor &&
                                       previousIndexLetter != (int)ArabicGeneralLetters::WawHamza &&
                                       previousIndexLetter != (int)ArabicGeneralLetters::Hamza &&
                                       previousIndexLetter != (int)ArabicGeneralLetters::ZeroWidthNoJoiner &&
                                       previousIndexLetter != (int)ArabicIsolatedLetters::Dal &&
                                       previousIndexLetter != (int)ArabicIsolatedLetters::Thal &&
                                       previousIndexLetter != (int)ArabicIsolatedLetters::Ra2 &&
                                       previousIndexLetter != (int)ArabicIsolatedLetters::Zeen &&
                                       previousIndexLetter != (int)ArabicIsolatedLetters::PersianZe &&
                                       previousIndexLetter != (int)ArabicIsolatedLetters::Waw &&
                                       previousIndexLetter != (int)ArabicIsolatedLetters::Alef &&
                                       previousIndexLetter != (int)ArabicIsolatedLetters::AlefMad &&
                                       previousIndexLetter != (int)ArabicIsolatedLetters::AlefHamza &&
                                       previousIndexLetter != (int)ArabicIsolatedLetters::AlefMaksoor &&
                                       previousIndexLetter != (int)ArabicIsolatedLetters::WawHamza &&
                                       previousIndexLetter != (int)ArabicIsolatedLetters::Hamza &&
                                       (previousIndexLetter < 0xFFFF && TextUtils::IsGlyphFixedArabicCharacter((char32_t)previousIndexLetter));


    bool canThisLetterBeFinishing = currentIndexLetter != ' ' &&
                                    currentIndexLetter != (int)ArabicGeneralLetters::ZeroWidthNoJoiner &&
                                    currentIndexLetter != (int)ArabicGeneralLetters::Hamza;

    return isPreviousLetterConnectable && canThisLetterBeFinishing;
}

bool RTLSupport::IsMiddleLetter(FastStringBuilder &letters, int index)
{
    auto currentIndexLetter = letters.Get(index);

    int previousIndexLetter = 0;
    if (index != 0)
        previousIndexLetter = letters.Get(index - 1);

    int nextIndexLetter = 0;
    if (index < letters.Length() - 1)
        nextIndexLetter = letters.Get(index + 1);

    bool middleLetterCheck = index != 0 &&
                             currentIndexLetter != (int)ArabicGeneralLetters::Alef &&
                             currentIndexLetter != (int)ArabicGeneralLetters::Dal &&
                             currentIndexLetter != (int)ArabicGeneralLetters::Thal &&
                             currentIndexLetter != (int)ArabicGeneralLetters::Ra2 &&
                             currentIndexLetter != (int)ArabicGeneralLetters::Zeen &&
                             currentIndexLetter != (int)ArabicGeneralLetters::PersianZe &&
                             currentIndexLetter != (int)ArabicGeneralLetters::Waw &&
                             currentIndexLetter != (int)ArabicGeneralLetters::AlefMad &&
                             currentIndexLetter != (int)ArabicGeneralLetters::AlefHamza &&
                             currentIndexLetter != (int)ArabicGeneralLetters::AlefMaksoor &&
                             currentIndexLetter != (int)ArabicGeneralLetters::WawHamza &&
                             currentIndexLetter != (int)ArabicGeneralLetters::ZeroWidthNoJoiner &&
                             currentIndexLetter != (int)ArabicGeneralLetters::Hamza;

    bool previousLetterCheck = index != 0 &&
                               previousIndexLetter != (int)ArabicGeneralLetters::Alef &&
                               previousIndexLetter != (int)ArabicGeneralLetters::Dal &&
                               previousIndexLetter != (int)ArabicGeneralLetters::Thal &&
                               previousIndexLetter != (int)ArabicGeneralLetters::Ra2 &&
                               previousIndexLetter != (int)ArabicGeneralLetters::Zeen &&
                               previousIndexLetter != (int)ArabicGeneralLetters::PersianZe &&
                               previousIndexLetter != (int)ArabicGeneralLetters::Waw &&
                               previousIndexLetter != (int)ArabicGeneralLetters::AlefMad &&
                               previousIndexLetter != (int)ArabicGeneralLetters::AlefHamza &&
                               previousIndexLetter != (int)ArabicGeneralLetters::AlefMaksoor &&
                               previousIndexLetter != (int)ArabicGeneralLetters::WawHamza &&
                               previousIndexLetter != (int)ArabicGeneralLetters::Hamza &&
                               previousIndexLetter != (int)ArabicGeneralLetters::ZeroWidthNoJoiner &&
                               previousIndexLetter != (int)ArabicIsolatedLetters::Alef &&
                               previousIndexLetter != (int)ArabicIsolatedLetters::Dal &&
                               previousIndexLetter != (int)ArabicIsolatedLetters::Thal &&
                               previousIndexLetter != (int)ArabicIsolatedLetters::Ra2 &&
                               previousIndexLetter != (int)ArabicIsolatedLetters::Zeen &&
                               previousIndexLetter != (int)ArabicIsolatedLetters::PersianZe &&
                               previousIndexLetter != (int)ArabicIsolatedLetters::Waw &&
                               previousIndexLetter != (int)ArabicIsolatedLetters::AlefMad &&
                               previousIndexLetter != (int)ArabicIsolatedLetters::AlefHamza &&
                               previousIndexLetter != (int)ArabicIsolatedLetters::AlefMaksoor &&
                               previousIndexLetter != (int)ArabicIsolatedLetters::WawHamza &&
                               previousIndexLetter != (int)ArabicIsolatedLetters::Hamza &&
                               (previousIndexLetter < 0xFFFF && TextUtils::IsGlyphFixedArabicCharacter((char32_t)previousIndexLetter));

    bool nextLetterCheck = index < letters.Length() - 1 &&
                           (nextIndexLetter < 0xFFFF && TextUtils::IsGlyphFixedArabicCharacter((char32_t)nextIndexLetter)) &&
                           nextIndexLetter != (int)ArabicGeneralLetters::ZeroWidthNoJoiner &&
                           nextIndexLetter != (int)ArabicGeneralLetters::Hamza &&
                           nextIndexLetter != (int)ArabicIsolatedLetters::Hamza;

    return nextLetterCheck && previousLetterCheck && middleLetterCheck;
}


void RTLSupport::FlushBufferToOutput(vector<int> buffer, FastStringBuilder &output)
{
    for (int j = 0; j < buffer.size(); j++)
    {
        output.Append(buffer[buffer.size() - 1 - j]);
    }

    buffer.clear();
}

void RTLSupport::LigatureFix(FastStringBuilder &input, FastStringBuilder &output, bool farsi, bool fixTextTags, bool preserveNumbers)
{
    LtrTextHolder.clear();
    TagTextHolder.clear();
    for (int i = input.Length() - 1; i >= 0; i--)
    {
        bool isInMiddle = i > 0 && i < input.Length() - 1;
        bool isAtBeginning = i == 0;
        bool isAtEnd = i == input.Length() - 1;

        int characterAtThisIndex = input.Get(i);

        int nextCharacter = 0;
        if (!isAtEnd)
            nextCharacter = input.Get(i + 1);

        int previousCharacter = 0;
        if (!isAtBeginning)
            previousCharacter = input.Get(i - 1);

        if (fixTextTags)
        {
            if (characterAtThisIndex == '>')
            {
                // We need to check if it is actually the beginning of a tag.
                bool isValidTag = false;
                int nextI = i;
                TagTextHolder.push_back(characterAtThisIndex);

                for (int j = i - 1; j >= 0; j--)
                {
                    auto jChar = input.Get(j);
                    
                    TagTextHolder.push_back(jChar);

                    if (jChar == '<')
                    {
                        auto jPlus1Char = input.Get(j + 1);
                        // Tags do not start with space
                        if (jPlus1Char == ' ')
                        {
                            break;
                        }
                        isValidTag = true;
                        nextI = j;
                        break;
                    }
                }

                if (isValidTag)
                {
                    FlushBufferToOutput(LtrTextHolder, output);
                    FlushBufferToOutput(TagTextHolder, output);
                    i = nextI;
                    continue;
                } else
                {
                    TagTextHolder.clear();
                }
            }
        }

        if (IsPunctuation(characterAtThisIndex) || IsSymbol(characterAtThisIndex))
        {
            const auto iter = MirroredCharsMap.find(characterAtThisIndex);
            if (iter != MirroredCharsMap.end())
            {
                // IsRTLCharacter returns false for null
                bool isAfterRTLCharacter = IsRTLCharacter(previousCharacter);
                bool isBeforeRTLCharacter = IsRTLCharacter(nextCharacter);
                if (isAfterRTLCharacter || isBeforeRTLCharacter)
                {
                    characterAtThisIndex = MirroredCharsMap[characterAtThisIndex];
                }
            }

            if (isInMiddle)
            {
                bool isAfterRTLCharacter = IsRTLCharacter(previousCharacter);
                bool isBeforeRTLCharacter = IsRTLCharacter(nextCharacter);
                bool isBeforeWhiteSpace = IsWhiteSpace(nextCharacter);
                bool isAfterWhiteSpace = IsWhiteSpace(previousCharacter);
                bool isUnderline = characterAtThisIndex == '_';
                bool isSpecialPunctuation = characterAtThisIndex == '.' ||
                                            characterAtThisIndex == 0x60C ||
                                            characterAtThisIndex == 0x61B;

                if (isBeforeRTLCharacter && isAfterRTLCharacter ||
                    isAfterWhiteSpace && isSpecialPunctuation ||
                    isBeforeWhiteSpace && isAfterRTLCharacter ||
                    isBeforeRTLCharacter && isAfterWhiteSpace ||
                    (isBeforeRTLCharacter || isAfterRTLCharacter) && isUnderline)
                {
                    FlushBufferToOutput(LtrTextHolder, output);
                    output.Append(characterAtThisIndex);
                } else
                {
                    LtrTextHolder.push_back(characterAtThisIndex);
                }
            } else if (isAtEnd)
            {
                LtrTextHolder.push_back(characterAtThisIndex);
            } else if (isAtBeginning)
            {
                output.Append(characterAtThisIndex);
            }

            continue;
        }

        if (isInMiddle)
        {
            bool isAfterEnglishChar = IsEnglishLetter(previousCharacter);
            bool isBeforeEnglishChar = IsEnglishLetter(nextCharacter);
            bool isAfterNumber = IsNumber(previousCharacter, preserveNumbers, farsi);
            bool isBeforeNumber = IsNumber(nextCharacter, preserveNumbers, farsi);
            bool isAfterSymbol = IsSymbol(previousCharacter);
            bool isBeforeSymbol = IsSymbol(nextCharacter);

            // For cases where english words and farsi/arabic are mixed. This allows for using farsi/arabic, english and numbers in one sentence.
            // If the space is between numbers,symbols or English words, keep the order
            if (characterAtThisIndex == ' ' &&
                (isBeforeEnglishChar || isBeforeNumber || isBeforeSymbol) &&
                (isAfterEnglishChar || isAfterNumber || isAfterSymbol))
            {
                LtrTextHolder.push_back(characterAtThisIndex);
                continue;
            }
        }

        if (IsEnglishLetter(characterAtThisIndex) ||
            IsNumber(characterAtThisIndex, preserveNumbers, farsi))
        {
            LtrTextHolder.push_back(characterAtThisIndex);
            continue;
        }

        // handle surrogates
        if (characterAtThisIndex >= 0xD800 &&
            characterAtThisIndex <= 0xDBFF ||
            characterAtThisIndex >= 0xDC00 && characterAtThisIndex <= 0xDFFF)
        {
            LtrTextHolder.push_back(characterAtThisIndex);
            continue;
        }

        FlushBufferToOutput(LtrTextHolder, output);

        if (characterAtThisIndex != 0xFFFF &&
            characterAtThisIndex != (int)ArabicGeneralLetters::ZeroWidthNoJoiner)
        {
            output.Append(characterAtThisIndex);
        }
    }

    FlushBufferToOutput(LtrTextHolder, output);
}

unsigned char CharUtil::Latin1CharInfo[256] = {
//  0     1     2     3     4     5     6     7     8     9     A     B     C     D     E     F
    0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x8E, 0x8E, 0x8E, 0x8E, 0x8E, 0x0E, 0x0E, // U+0000..U+000F
    0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, // U+0010..U+001F
    0x8B, 0x18, 0x18, 0x18, 0x1A, 0x18, 0x18, 0x18, 0x14, 0x15, 0x18, 0x19, 0x18, 0x13, 0x18, 0x18, // U+0020..U+002F
    0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x18, 0x18, 0x19, 0x19, 0x19, 0x18, // U+0030..U+003F
    0x18, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, // U+0040..U+004F
    0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x14, 0x18, 0x15, 0x1B, 0x12, // U+0050..U+005F
    0x1B, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, // U+0060..U+006F
    0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x14, 0x19, 0x15, 0x19, 0x0E, // U+0070..U+007F
    0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x8E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, // U+0080..U+008F
    0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, // U+0090..U+009F
    0x8B, 0x18, 0x1A, 0x1A, 0x1A, 0x1A, 0x1C, 0x18, 0x1B, 0x1C, 0x04, 0x16, 0x19, 0x0F, 0x1C, 0x1B, // U+00A0..U+00AF
    0x1C, 0x19, 0x0A, 0x0A, 0x1B, 0x21, 0x18, 0x18, 0x1B, 0x0A, 0x04, 0x17, 0x0A, 0x0A, 0x0A, 0x18, // U+00B0..U+00BF
    0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, // U+00C0..U+00CF
    0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x19, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x21, // U+00D0..U+00DF
    0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, // U+00E0..U+00EF
    0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x19, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, // U+00F0..U+00FF
};

// 11:5:4 index table of the Unicode category & casing data.
unsigned char CharUtil::CategoryCasingLevel1Index[2176] = {
    0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
    0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a,
    0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1b, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a,
    0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a,
    0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1c,
    0x1d, 0x1a, 0x1e, 0x1f, 0x20, 0x21, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a,
    0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x22, 0x23, 0x23, 0x23, 0x23,
    0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x25, 0x26, 0x27, 0x28,
    0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38,
    0x1a, 0x39, 0x3a, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x1a, 0x1a, 0x3c, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b,
    0x3b, 0x3b, 0x1a, 0x3d, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b,
    0x3b, 0x3b, 0x3b, 0x3b, 0x1a, 0x3e, 0x3b, 0x3f, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a,
    0x1a, 0x1a, 0x1a, 0x40, 0x1a, 0x1a, 0x41, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b,
    0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x42, 0x43, 0x3b, 0x3b, 0x3b, 0x3b, 0x44, 0x3b,
    0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x3b, 0x3b,
    0x4b, 0x4c, 0x3b, 0x3b, 0x4d, 0x4e, 0x4f, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x3b, 0x57,
    0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a,
    0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a,
    0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a,
    0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a,
    0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a,
    0x1a, 0x1a, 0x1a, 0x58, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x59, 0x5a, 0x1a, 0x1a, 0x1a,
    0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x5b, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a,
    0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x5c, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x1a, 0x5d, 0x3b, 0x57,
    0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x5e, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b,
    0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b,
    0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b,
    0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b,
    0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b,
    0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b,
    0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b,
    0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x57,
    0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b,
    0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b,
    0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b,
    0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b,
    0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b,
    0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b,
    0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b,
    0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x57,
    0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b,
    0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b,
    0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b,
    0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b,
    0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b,
    0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b,
    0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b,
    0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x57,
    0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b,
    0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b,
    0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b,
    0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b,
    0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b,
    0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b,
    0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b,
    0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x57,
    0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b,
    0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b,
    0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b,
    0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b,
    0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b,
    0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b,
    0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b,
    0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x57,
    0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b,
    0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b,
    0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b,
    0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b,
    0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b,
    0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b,
    0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b,
    0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x57,
    0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b,
    0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b,
    0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b,
    0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b,
    0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b,
    0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b,
    0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b,
    0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x57,
    0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b,
    0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b,
    0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b,
    0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b,
    0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b,
    0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b,
    0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b,
    0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x57,
    0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b,
    0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b,
    0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b,
    0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b,
    0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b,
    0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b,
    0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b,
    0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x57,
    0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b,
    0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b,
    0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b,
    0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b,
    0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b,
    0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b,
    0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b,
    0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x57,
    0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b,
    0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b,
    0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b,
    0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b,
    0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b,
    0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b,
    0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b,
    0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x57,
    0x5f, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b,
    0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b,
    0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b,
    0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b,
    0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b,
    0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b,
    0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b,
    0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x3b, 0x57,
    0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24,
    0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24,
    0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24,
    0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24,
    0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24,
    0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24,
    0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24,
    0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x61,
    0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24,
    0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24,
    0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24,
    0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24,
    0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24,
    0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24,
    0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24,
    0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x61
};

unsigned char CharUtil::CategoryCasingLevel2Index[6272] ={
    0x00, 0x00, 0x01, 0x00, 0x02, 0x00, 0x03, 0x00, 0x04, 0x00, 0x05, 0x00, 0x06, 0x00, 0x07, 0x00,
    0x08, 0x00, 0x01, 0x00, 0x09, 0x00, 0x0a, 0x00, 0x0b, 0x00, 0x0c, 0x00, 0x0d, 0x00, 0x0e, 0x00,
    0x0f, 0x00, 0x0f, 0x00, 0x0f, 0x00, 0x10, 0x00, 0x11, 0x00, 0x0f, 0x00, 0x0f, 0x00, 0x12, 0x00,
    0x13, 0x00, 0x14, 0x00, 0x15, 0x00, 0x16, 0x00, 0x17, 0x00, 0x18, 0x00, 0x0f, 0x00, 0x19, 0x00,
    0x0f, 0x00, 0x0f, 0x00, 0x1a, 0x00, 0x1b, 0x00, 0x1c, 0x00, 0x1d, 0x00, 0x1e, 0x00, 0x1f, 0x00,
    0x20, 0x00, 0x21, 0x00, 0x22, 0x00, 0x23, 0x00, 0x24, 0x00, 0x25, 0x00, 0x26, 0x00, 0x27, 0x00,
    0x28, 0x00, 0x28, 0x00, 0x28, 0x00, 0x28, 0x00, 0x29, 0x00, 0x28, 0x00, 0x28, 0x00, 0x2a, 0x00,
    0x2b, 0x00, 0x2c, 0x00, 0x2d, 0x00, 0x2e, 0x00, 0x2f, 0x00, 0x30, 0x00, 0x0f, 0x00, 0x31, 0x00,
    0x32, 0x00, 0x0b, 0x00, 0x0b, 0x00, 0x0d, 0x00, 0x0d, 0x00, 0x33, 0x00, 0x0f, 0x00, 0x0f, 0x00,
    0x34, 0x00, 0x0f, 0x00, 0x0f, 0x00, 0x0f, 0x00, 0x35, 0x00, 0x0f, 0x00, 0x0f, 0x00, 0x0f, 0x00,
    0x0f, 0x00, 0x0f, 0x00, 0x0f, 0x00, 0x36, 0x00, 0x37, 0x00, 0x38, 0x00, 0x39, 0x00, 0x3a, 0x00,
    0x3b, 0x00, 0x3c, 0x00, 0x28, 0x00, 0x3d, 0x00, 0x3e, 0x00, 0x3f, 0x00, 0x40, 0x00, 0x41, 0x00,
    0x42, 0x00, 0x43, 0x00, 0x3f, 0x00, 0x3f, 0x00, 0x44, 0x00, 0x28, 0x00, 0x45, 0x00, 0x46, 0x00,
    0x3f, 0x00, 0x3f, 0x00, 0x3f, 0x00, 0x3f, 0x00, 0x3f, 0x00, 0x47, 0x00, 0x48, 0x00, 0x49, 0x00,
    0x4a, 0x00, 0x4b, 0x00, 0x3f, 0x00, 0x28, 0x00, 0x4c, 0x00, 0x3f, 0x00, 0x3f, 0x00, 0x3f, 0x00,
    0x3f, 0x00, 0x3f, 0x00, 0x4d, 0x00, 0x4e, 0x00, 0x4f, 0x00, 0x3f, 0x00, 0x50, 0x00, 0x51, 0x00,
    0x3f, 0x00, 0x52, 0x00, 0x53, 0x00, 0x54, 0x00, 0x3f, 0x00, 0x55, 0x00, 0x56, 0x00, 0x57, 0x00,
    0x57, 0x00, 0x57, 0x00, 0x3f, 0x00, 0x58, 0x00, 0x59, 0x00, 0x5a, 0x00, 0x5b, 0x00, 0x28, 0x00,
    0x5c, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5e, 0x00, 0x5f, 0x00, 0x60, 0x00, 0x61, 0x00, 0x62, 0x00,
    0x63, 0x00, 0x64, 0x00, 0x65, 0x00, 0x66, 0x00, 0x67, 0x00, 0x68, 0x00, 0x69, 0x00, 0x6a, 0x00,
    0x6b, 0x00, 0x64, 0x00, 0x65, 0x00, 0x6c, 0x00, 0x6d, 0x00, 0x6e, 0x00, 0x6f, 0x00, 0x70, 0x00,
    0x71, 0x00, 0x72, 0x00, 0x65, 0x00, 0x73, 0x00, 0x74, 0x00, 0x75, 0x00, 0x69, 0x00, 0x76, 0x00,
    0x77, 0x00, 0x64, 0x00, 0x65, 0x00, 0x78, 0x00, 0x79, 0x00, 0x7a, 0x00, 0x69, 0x00, 0x7b, 0x00,
    0x7c, 0x00, 0x7d, 0x00, 0x7e, 0x00, 0x7f, 0x00, 0x80, 0x00, 0x81, 0x00, 0x6f, 0x00, 0x82, 0x00,
    0x83, 0x00, 0x84, 0x00, 0x65, 0x00, 0x85, 0x00, 0x86, 0x00, 0x87, 0x00, 0x69, 0x00, 0x88, 0x00,
    0x89, 0x00, 0x84, 0x00, 0x65, 0x00, 0x8a, 0x00, 0x8b, 0x00, 0x8c, 0x00, 0x69, 0x00, 0x8d, 0x00,
    0x8e, 0x00, 0x84, 0x00, 0x5d, 0x00, 0x8f, 0x00, 0x90, 0x00, 0x91, 0x00, 0x69, 0x00, 0x92, 0x00,
    0x93, 0x00, 0x94, 0x00, 0x5d, 0x00, 0x95, 0x00, 0x96, 0x00, 0x97, 0x00, 0x6f, 0x00, 0x98, 0x00,
    0x99, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x9a, 0x00, 0x9b, 0x00, 0x9c, 0x00, 0x9d, 0x00, 0x9d, 0x00,
    0x9e, 0x00, 0x5d, 0x00, 0x9f, 0x00, 0xa0, 0x00, 0xa1, 0x00, 0xa2, 0x00, 0x9d, 0x00, 0x9d, 0x00,
    0xa3, 0x00, 0xa4, 0x00, 0xa5, 0x00, 0xa6, 0x00, 0xa7, 0x00, 0x5d, 0x00, 0xa8, 0x00, 0xa9, 0x00,
    0xaa, 0x00, 0xab, 0x00, 0x28, 0x00, 0xac, 0x00, 0xad, 0x00, 0xae, 0x00, 0x9d, 0x00, 0x9d, 0x00,
    0x5d, 0x00, 0x5d, 0x00, 0xaf, 0x00, 0xb0, 0x00, 0xb1, 0x00, 0xb2, 0x00, 0xb3, 0x00, 0xb4, 0x00,
    0xb5, 0x00, 0xb6, 0x00, 0xb7, 0x00, 0xb7, 0x00, 0xb8, 0x00, 0xb9, 0x00, 0xb9, 0x00, 0xba, 0x00,
    0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00,
    0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00,
    0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0xbb, 0x00, 0xbc, 0x00, 0x5d, 0x00, 0x5d, 0x00,
    0xbb, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0xbd, 0x00, 0xbe, 0x00, 0xbf, 0x00, 0x5d, 0x00, 0x5d, 0x00,
    0x5d, 0x00, 0xbe, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0xc0, 0x00, 0xc1, 0x00, 0xc2, 0x00,
    0x5d, 0x00, 0xc3, 0x00, 0xc4, 0x00, 0xc4, 0x00, 0xc4, 0x00, 0xc4, 0x00, 0xc4, 0x00, 0xc5, 0x00,
    0xc6, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00,
    0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00,
    0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00,
    0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00,
    0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0xc7, 0x00, 0x5d, 0x00,
    0xc8, 0x00, 0xc9, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0xca, 0x00, 0xcb, 0x00,
    0xcc, 0x00, 0xcd, 0x00, 0x5d, 0x00, 0xce, 0x00, 0x5d, 0x00, 0xcf, 0x00, 0xcc, 0x00, 0xd0, 0x00,
    0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0xd1, 0x00, 0xd2, 0x00, 0xd3, 0x00, 0xd4, 0x00, 0xd5, 0x00,
    0xd6, 0x00, 0xd4, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0xd7, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0xd8, 0x00,
    0xd9, 0x00, 0x5d, 0x00, 0xda, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0xdb, 0x00,
    0x5d, 0x00, 0xdc, 0x00, 0xdd, 0x00, 0xde, 0x00, 0xdf, 0x00, 0x5d, 0x00, 0xe0, 0x00, 0xe1, 0x00,
    0x5d, 0x00, 0x5d, 0x00, 0xe2, 0x00, 0x5d, 0x00, 0xe3, 0x00, 0xe4, 0x00, 0xe5, 0x00, 0xe5, 0x00,
    0x5d, 0x00, 0xe6, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0xe7, 0x00, 0xe8, 0x00, 0xe9, 0x00,
    0xd4, 0x00, 0xd4, 0x00, 0xea, 0x00, 0xeb, 0x00, 0xec, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00,
    0xed, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0xee, 0x00, 0xef, 0x00, 0xb1, 0x00, 0xf0, 0x00, 0xf1, 0x00,
    0xf2, 0x00, 0x5d, 0x00, 0xf3, 0x00, 0xf4, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0xf5, 0x00, 0xf6, 0x00,
    0x5d, 0x00, 0x5d, 0x00, 0xf7, 0x00, 0xf8, 0x00, 0xf9, 0x00, 0xf4, 0x00, 0x5d, 0x00, 0xfa, 0x00,
    0xfb, 0x00, 0xfc, 0x00, 0xfc, 0x00, 0xfd, 0x00, 0xfe, 0x00, 0xff, 0x00, 0x00, 0x01, 0x01, 0x01,
    0x22, 0x00, 0x22, 0x00, 0x02, 0x01, 0x03, 0x01, 0x03, 0x01, 0x03, 0x01, 0x04, 0x01, 0x05, 0x01,
    0x06, 0x01, 0x07, 0x01, 0x03, 0x01, 0x03, 0x01, 0x28, 0x00, 0x28, 0x00, 0x28, 0x00, 0x08, 0x01,
    0x0f, 0x00, 0x0f, 0x00, 0x0f, 0x00, 0x0f, 0x00, 0x0f, 0x00, 0x0f, 0x00, 0x0f, 0x00, 0x0f, 0x00,
    0x0f, 0x00, 0x09, 0x01, 0x0f, 0x00, 0x0f, 0x00, 0x0f, 0x00, 0x0f, 0x00, 0x0f, 0x00, 0x0f, 0x00,
    0x0a, 0x01, 0x0b, 0x01, 0x0a, 0x01, 0x0a, 0x01, 0x0b, 0x01, 0x0c, 0x01, 0x0a, 0x01, 0x0d, 0x01,
    0x0e, 0x01, 0x0e, 0x01, 0x0e, 0x01, 0x0f, 0x01, 0x10, 0x01, 0x11, 0x01, 0x12, 0x01, 0x13, 0x01,
    0x14, 0x01, 0x15, 0x01, 0x16, 0x01, 0x17, 0x01, 0x18, 0x01, 0x19, 0x01, 0x1a, 0x01, 0x1b, 0x01,
    0x1c, 0x01, 0x1d, 0x01, 0x1e, 0x01, 0x1e, 0x01, 0x1f, 0x01, 0x20, 0x01, 0x21, 0x01, 0xec, 0x00,
    0x22, 0x01, 0x23, 0x01, 0x24, 0x01, 0x25, 0x01, 0x26, 0x01, 0x27, 0x01, 0x28, 0x01, 0x29, 0x01,
    0x2a, 0x01, 0x2b, 0x01, 0x2c, 0x01, 0xe5, 0x00, 0x2d, 0x01, 0x2e, 0x01, 0xe5, 0x00, 0x2f, 0x01,
    0x30, 0x01, 0x30, 0x01, 0x30, 0x01, 0x30, 0x01, 0x30, 0x01, 0x30, 0x01, 0x30, 0x01, 0x30, 0x01,
    0x30, 0x01, 0x30, 0x01, 0x30, 0x01, 0x30, 0x01, 0x30, 0x01, 0x30, 0x01, 0x30, 0x01, 0x30, 0x01,
    0x31, 0x01, 0xe5, 0x00, 0x32, 0x01, 0x33, 0x01, 0x34, 0x01, 0x34, 0x01, 0x34, 0x01, 0x35, 0x01,
    0xe5, 0x00, 0x36, 0x01, 0x30, 0x01, 0x37, 0x01, 0xe5, 0x00, 0x38, 0x01, 0x39, 0x01, 0xe5, 0x00,
    0xe5, 0x00, 0xe5, 0x00, 0x3a, 0x01, 0x9d, 0x00, 0x3b, 0x01, 0x9d, 0x00, 0x27, 0x01, 0x27, 0x01,
    0x27, 0x01, 0x3c, 0x01, 0x34, 0x01, 0x3d, 0x01, 0x3e, 0x01, 0x3f, 0x01, 0x40, 0x01, 0x27, 0x01,
    0xe5, 0x00, 0xe5, 0x00, 0xe5, 0x00, 0xe5, 0x00, 0xe5, 0x00, 0xe5, 0x00, 0xe5, 0x00, 0xe5, 0x00,
    0xe5, 0x00, 0xe5, 0x00, 0xe5, 0x00, 0x41, 0x01, 0x42, 0x01, 0xe5, 0x00, 0xe5, 0x00, 0x43, 0x01,
    0xe5, 0x00, 0xe5, 0x00, 0xe5, 0x00, 0xe5, 0x00, 0xe5, 0x00, 0xe5, 0x00, 0x44, 0x01, 0xe5, 0x00,
    0xe5, 0x00, 0xe5, 0x00, 0x45, 0x01, 0xe5, 0x00, 0xe5, 0x00, 0xe5, 0x00, 0xe5, 0x00, 0xe5, 0x00,
    0xe5, 0x00, 0xe5, 0x00, 0xe5, 0x00, 0xe5, 0x00, 0xe5, 0x00, 0xe5, 0x00, 0x46, 0x01, 0x47, 0x01,
    0x27, 0x01, 0x48, 0x01, 0xe5, 0x00, 0xe5, 0x00, 0x49, 0x01, 0x30, 0x01, 0x4a, 0x01, 0x30, 0x01,
    0x34, 0x01, 0x34, 0x01, 0x34, 0x01, 0x34, 0x01, 0x34, 0x01, 0x34, 0x01, 0x34, 0x01, 0x34, 0x01,
    0x34, 0x01, 0x34, 0x01, 0x34, 0x01, 0x34, 0x01, 0x34, 0x01, 0x34, 0x01, 0x34, 0x01, 0x34, 0x01,
    0x30, 0x01, 0x30, 0x01, 0x30, 0x01, 0x30, 0x01, 0x30, 0x01, 0x30, 0x01, 0x30, 0x01, 0x30, 0x01,
    0x4b, 0x01, 0x4c, 0x01, 0x30, 0x01, 0x30, 0x01, 0x30, 0x01, 0x4d, 0x01, 0x30, 0x01, 0x4e, 0x01,
    0x30, 0x01, 0x30, 0x01, 0x30, 0x01, 0x30, 0x01, 0x30, 0x01, 0x30, 0x01, 0x30, 0x01, 0x30, 0x01,
    0x30, 0x01, 0x30, 0x01, 0x30, 0x01, 0x30, 0x01, 0x30, 0x01, 0x30, 0x01, 0x30, 0x01, 0x30, 0x01,
    0xe5, 0x00, 0xe5, 0x00, 0xe5, 0x00, 0x30, 0x01, 0x4f, 0x01, 0xe5, 0x00, 0xe5, 0x00, 0x50, 0x01,
    0xe5, 0x00, 0x51, 0x01, 0xe5, 0x00, 0xe5, 0x00, 0xe5, 0x00, 0xe5, 0x00, 0xe5, 0x00, 0xe5, 0x00,
    0x37, 0x00, 0x37, 0x00, 0x52, 0x01, 0x3a, 0x00, 0x3a, 0x00, 0x53, 0x01, 0x54, 0x01, 0x55, 0x01,
    0x0f, 0x00, 0x0f, 0x00, 0x0f, 0x00, 0x0f, 0x00, 0x0f, 0x00, 0x0f, 0x00, 0x56, 0x01, 0x57, 0x01,
    0x58, 0x01, 0x58, 0x01, 0x59, 0x01, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5a, 0x01, 0x5b, 0x01,
    0x5d, 0x00, 0x5c, 0x01, 0x5d, 0x01, 0x5d, 0x01, 0x5d, 0x01, 0x5d, 0x01, 0x28, 0x00, 0x28, 0x00,
    0x5e, 0x01, 0x5f, 0x01, 0x60, 0x01, 0x61, 0x01, 0x62, 0x01, 0x63, 0x01, 0x9d, 0x00, 0x9d, 0x00,
    0xe5, 0x00, 0x64, 0x01, 0xe5, 0x00, 0xe5, 0x00, 0xe5, 0x00, 0xe5, 0x00, 0xe5, 0x00, 0x65, 0x01,
    0xe5, 0x00, 0xe5, 0x00, 0xe5, 0x00, 0xe5, 0x00, 0xe5, 0x00, 0xe5, 0x00, 0xe5, 0x00, 0xe5, 0x00,
    0xe5, 0x00, 0xe5, 0x00, 0xe5, 0x00, 0xe5, 0x00, 0xe5, 0x00, 0x66, 0x01, 0x9d, 0x00, 0x67, 0x01,
    0x68, 0x01, 0x69, 0x01, 0x6a, 0x01, 0x6b, 0x01, 0x99, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00,
    0x5d, 0x00, 0x6c, 0x01, 0xc6, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x6d, 0x01,
    0x6e, 0x01, 0x5d, 0x00, 0x5d, 0x00, 0x99, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00,
    0xdc, 0x00, 0x6f, 0x01, 0x5d, 0x00, 0x5d, 0x00, 0xe5, 0x00, 0xe5, 0x00, 0x65, 0x01, 0x5d, 0x00,
    0x34, 0x01, 0x70, 0x01, 0x71, 0x01, 0x34, 0x01, 0x72, 0x01, 0x73, 0x01, 0x34, 0x01, 0x74, 0x01,
    0x71, 0x01, 0x34, 0x01, 0x34, 0x01, 0x75, 0x01, 0x76, 0x01, 0x34, 0x01, 0x34, 0x01, 0x34, 0x01,
    0x34, 0x01, 0x34, 0x01, 0x34, 0x01, 0x34, 0x01, 0x34, 0x01, 0x34, 0x01, 0x34, 0x01, 0x77, 0x01,
    0x34, 0x01, 0x34, 0x01, 0x34, 0x01, 0x34, 0x01, 0x34, 0x01, 0x78, 0x01, 0x34, 0x01, 0x79, 0x01,
    0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00,
    0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00,
    0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00,
    0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00,
    0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00,
    0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00,
    0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00,
    0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0xe5, 0x00, 0xe5, 0x00, 0xe5, 0x00, 0xe5, 0x00,
    0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00,
    0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00,
    0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00,
    0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0xa8, 0x00,
    0x5d, 0x00, 0x7a, 0x01, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00,
    0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00,
    0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00,
    0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00,
    0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00,
    0xa8, 0x00, 0xe5, 0x00, 0xe5, 0x00, 0xe5, 0x00, 0x3a, 0x01, 0x5d, 0x00, 0x5d, 0x00, 0xfa, 0x00,
    0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00,
    0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00,
    0x7b, 0x01, 0x5d, 0x00, 0x7c, 0x01, 0x9d, 0x00, 0x0f, 0x00, 0x0f, 0x00, 0x7d, 0x01, 0x7e, 0x01,
    0x0f, 0x00, 0x7f, 0x01, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x80, 0x01, 0x81, 0x01,
    0x27, 0x00, 0x82, 0x01, 0x83, 0x01, 0x84, 0x01, 0x0f, 0x00, 0x0f, 0x00, 0x0f, 0x00, 0x85, 0x01,
    0x86, 0x01, 0x87, 0x01, 0x88, 0x01, 0x89, 0x01, 0x8a, 0x01, 0x9d, 0x00, 0x9d, 0x00, 0x8b, 0x01,
    0x8c, 0x01, 0x5d, 0x00, 0x8d, 0x01, 0x8e, 0x01, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x8f, 0x01,
    0x90, 0x01, 0x5d, 0x00, 0x5d, 0x00, 0x91, 0x01, 0x92, 0x01, 0xd4, 0x00, 0x28, 0x00, 0x93, 0x01,
    0xf4, 0x00, 0x5d, 0x00, 0x94, 0x01, 0x5d, 0x00, 0x95, 0x01, 0x96, 0x01, 0x5d, 0x00, 0xa8, 0x00,
    0x5c, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x97, 0x01, 0x98, 0x01, 0x99, 0x01, 0x9a, 0x01, 0x9b, 0x01,
    0x5d, 0x00, 0x5d, 0x00, 0x9c, 0x01, 0x9d, 0x01, 0x9e, 0x01, 0x9f, 0x01, 0x5d, 0x00, 0xa0, 0x01,
    0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0xa1, 0x01, 0xa2, 0x01, 0xa3, 0x01, 0xa4, 0x01, 0xa5, 0x01,
    0xa6, 0x01, 0xa7, 0x01, 0x5d, 0x01, 0x22, 0x00, 0x22, 0x00, 0xa8, 0x01, 0xa9, 0x01, 0xaa, 0x01,
    0xaa, 0x01, 0xaa, 0x01, 0xaa, 0x01, 0xaa, 0x01, 0x5d, 0x00, 0x5d, 0x00, 0xab, 0x01, 0xd4, 0x00,
    0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00,
    0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00,
    0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00,
    0x5d, 0x00, 0x5d, 0x00, 0xac, 0x01, 0x5d, 0x00, 0xad, 0x01, 0x5d, 0x00, 0x5d, 0x00, 0xe2, 0x00,
    0xae, 0x01, 0xae, 0x01, 0xae, 0x01, 0xae, 0x01, 0xae, 0x01, 0xae, 0x01, 0xae, 0x01, 0xae, 0x01,
    0xae, 0x01, 0xae, 0x01, 0xae, 0x01, 0xae, 0x01, 0xae, 0x01, 0xae, 0x01, 0xae, 0x01, 0xae, 0x01,
    0xae, 0x01, 0xae, 0x01, 0xae, 0x01, 0xae, 0x01, 0xae, 0x01, 0xae, 0x01, 0xae, 0x01, 0xae, 0x01,
    0xae, 0x01, 0xae, 0x01, 0xae, 0x01, 0xae, 0x01, 0xae, 0x01, 0xae, 0x01, 0xae, 0x01, 0xae, 0x01,
    0xaf, 0x01, 0xaf, 0x01, 0xaf, 0x01, 0xaf, 0x01, 0xaf, 0x01, 0xaf, 0x01, 0xaf, 0x01, 0xaf, 0x01,
    0xaf, 0x01, 0xaf, 0x01, 0xaf, 0x01, 0xaf, 0x01, 0xaf, 0x01, 0xaf, 0x01, 0xaf, 0x01, 0xaf, 0x01,
    0xaf, 0x01, 0xaf, 0x01, 0xaf, 0x01, 0xaf, 0x01, 0xaf, 0x01, 0xaf, 0x01, 0xaf, 0x01, 0xaf, 0x01,
    0xaf, 0x01, 0xaf, 0x01, 0xaf, 0x01, 0xaf, 0x01, 0xaf, 0x01, 0xaf, 0x01, 0xaf, 0x01, 0xaf, 0x01,
    0xaf, 0x01, 0xaf, 0x01, 0xaf, 0x01, 0xaf, 0x01, 0xaf, 0x01, 0xaf, 0x01, 0xaf, 0x01, 0xaf, 0x01,
    0xaf, 0x01, 0xaf, 0x01, 0xaf, 0x01, 0xaf, 0x01, 0xaf, 0x01, 0xaf, 0x01, 0xaf, 0x01, 0xaf, 0x01,
    0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00,
    0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00,
    0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0xe0, 0x00, 0x5d, 0x00,
    0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0xe3, 0x00, 0x9d, 0x00, 0x9d, 0x00,
    0xb0, 0x01, 0xb1, 0x01, 0xb2, 0x01, 0xb3, 0x01, 0xb4, 0x01, 0x3f, 0x00, 0x3f, 0x00, 0x3f, 0x00,
    0x3f, 0x00, 0x3f, 0x00, 0x3f, 0x00, 0xb5, 0x01, 0xb6, 0x01, 0xb7, 0x01, 0x3f, 0x00, 0x3f, 0x00,
    0x3f, 0x00, 0x3f, 0x00, 0x3f, 0x00, 0x3f, 0x00, 0x3f, 0x00, 0x3f, 0x00, 0x3f, 0x00, 0x3f, 0x00,
    0x3f, 0x00, 0x3f, 0x00, 0x3f, 0x00, 0x3f, 0x00, 0x3f, 0x00, 0x3f, 0x00, 0x3f, 0x00, 0x3f, 0x00,
    0x3f, 0x00, 0x3f, 0x00, 0x3f, 0x00, 0xb8, 0x01, 0x57, 0x00, 0x3f, 0x00, 0x3f, 0x00, 0x3f, 0x00,
    0x3f, 0x00, 0xb9, 0x01, 0x3f, 0x00, 0x3f, 0x00, 0x59, 0x00, 0x1f, 0x01, 0x1f, 0x01, 0xba, 0x01,
    0x28, 0x00, 0xbb, 0x01, 0x28, 0x00, 0xbc, 0x01, 0xbd, 0x01, 0xbe, 0x01, 0xbf, 0x01, 0x58, 0x00,
    0x3f, 0x00, 0x3f, 0x00, 0x3f, 0x00, 0x3f, 0x00, 0x3f, 0x00, 0x3f, 0x00, 0x3f, 0x00, 0xc0, 0x01,
    0xc1, 0x01, 0x03, 0x00, 0x04, 0x00, 0x05, 0x00, 0x06, 0x00, 0xc2, 0x01, 0xc3, 0x01, 0xc4, 0x01,
    0x5d, 0x00, 0xc5, 0x01, 0x5d, 0x00, 0xdc, 0x00, 0xc6, 0x01, 0xc7, 0x01, 0xc8, 0x01, 0xc9, 0x01,
    0xca, 0x01, 0x5d, 0x00, 0xbf, 0x00, 0xcb, 0x01, 0xe0, 0x00, 0xe0, 0x00, 0x9d, 0x00, 0x9d, 0x00,
    0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0xcc, 0x01,
    0xcd, 0x01, 0xce, 0x01, 0xce, 0x01, 0xcf, 0x01, 0xd0, 0x01, 0xd0, 0x01, 0xd0, 0x01, 0xd1, 0x01,
    0xd2, 0x01, 0xd3, 0x01, 0xd4, 0x01, 0x9d, 0x00, 0x9d, 0x00, 0x34, 0x01, 0x34, 0x01, 0xd5, 0x01,
    0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00,
    0x5d, 0x00, 0xa8, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x75, 0x00, 0xd6, 0x01, 0xd7, 0x01,
    0x5d, 0x00, 0x5d, 0x00, 0xd8, 0x01, 0x5d, 0x00, 0xd9, 0x01, 0x5d, 0x00, 0x5d, 0x00, 0xda, 0x01,
    0x5d, 0x00, 0xdb, 0x01, 0x5d, 0x00, 0x5d, 0x00, 0xdc, 0x01, 0xdd, 0x01, 0x9d, 0x00, 0x9d, 0x00,
    0xde, 0x01, 0xde, 0x01, 0xdf, 0x01, 0xe0, 0x01, 0xe0, 0x01, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00,
    0x5d, 0x00, 0xe0, 0x00, 0xd4, 0x00, 0xde, 0x01, 0xde, 0x01, 0xe1, 0x01, 0xe0, 0x01, 0xe2, 0x01,
    0x5d, 0x00, 0x5d, 0x00, 0xe3, 0x01, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0xe4, 0x01, 0x9d, 0x00,
    0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00,
    0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00,
    0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00,
    0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5c, 0x01, 0x5d, 0x00, 0xdb, 0x00, 0xe3, 0x01, 0x9d, 0x00,
    0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00,
    0xe5, 0x01, 0x3f, 0x00, 0x3f, 0x00, 0xe6, 0x01, 0x3f, 0x00, 0xe7, 0x01, 0x3f, 0x00, 0xe8, 0x01,
    0x3f, 0x00, 0xe9, 0x01, 0xea, 0x01, 0x57, 0x00, 0x57, 0x00, 0x57, 0x00, 0x3f, 0x00, 0xeb, 0x01,
    0x3f, 0x00, 0xec, 0x01, 0x3f, 0x00, 0xed, 0x01, 0x57, 0x00, 0x57, 0x00, 0x57, 0x00, 0x57, 0x00,
    0x3f, 0x00, 0x3f, 0x00, 0x3f, 0x00, 0xee, 0x01, 0xef, 0x01, 0xf0, 0x01, 0xef, 0x01, 0xef, 0x01,
    0xf1, 0x01, 0xf2, 0x01, 0x3f, 0x00, 0xf3, 0x01, 0xf4, 0x01, 0xf5, 0x01, 0x3f, 0x00, 0xf6, 0x01,
    0x3f, 0x00, 0xf7, 0x01, 0x57, 0x00, 0x57, 0x00, 0xf8, 0x01, 0x3f, 0x00, 0xf9, 0x01, 0xfa, 0x01,
    0x3f, 0x00, 0x3f, 0x00, 0x3f, 0x00, 0xfb, 0x01, 0x3f, 0x00, 0xfc, 0x01, 0x3f, 0x00, 0xfd, 0x01,
    0x3f, 0x00, 0xfe, 0x01, 0xff, 0x01, 0x57, 0x00, 0x57, 0x00, 0x57, 0x00, 0x57, 0x00, 0x57, 0x00,
    0x3f, 0x00, 0x3f, 0x00, 0x3f, 0x00, 0x3f, 0x00, 0x00, 0x02, 0x57, 0x00, 0x57, 0x00, 0x57, 0x00,
    0x01, 0x02, 0x01, 0x02, 0x01, 0x02, 0x02, 0x02, 0x03, 0x02, 0x03, 0x02, 0x03, 0x02, 0x04, 0x02,
    0x3f, 0x00, 0x3f, 0x00, 0x05, 0x02, 0x06, 0x02, 0x57, 0x00, 0x57, 0x00, 0x57, 0x00, 0x57, 0x00,
    0x57, 0x00, 0x57, 0x00, 0x57, 0x00, 0x57, 0x00, 0x57, 0x00, 0x57, 0x00, 0x57, 0x00, 0x57, 0x00,
    0x57, 0x00, 0x57, 0x00, 0x57, 0x00, 0x57, 0x00, 0x57, 0x00, 0x57, 0x00, 0x27, 0x01, 0x07, 0x02,
    0x3f, 0x00, 0x3f, 0x00, 0x08, 0x02, 0x09, 0x02, 0x57, 0x00, 0x57, 0x00, 0x57, 0x00, 0x57, 0x00,
    0x3f, 0x00, 0xf7, 0x01, 0x0a, 0x02, 0x3f, 0x00, 0x4d, 0x00, 0x0b, 0x02, 0x57, 0x00, 0x57, 0x00,
    0x57, 0x00, 0x57, 0x00, 0x57, 0x00, 0x3f, 0x00, 0x0c, 0x02, 0x57, 0x00, 0x3f, 0x00, 0x0d, 0x02,
    0x0e, 0x02, 0x5d, 0x00, 0x5d, 0x00, 0x0f, 0x02, 0x10, 0x02, 0x11, 0x02, 0x12, 0x02, 0x13, 0x02,
    0xf2, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x14, 0x02, 0x15, 0x02, 0x5d, 0x00, 0xd8, 0x00, 0xd4, 0x00,
    0x16, 0x02, 0x5d, 0x00, 0x17, 0x02, 0x18, 0x02, 0x19, 0x02, 0x5d, 0x00, 0x5d, 0x00, 0x1a, 0x02,
    0xf2, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x1b, 0x02, 0x1c, 0x02, 0x1d, 0x02, 0x1e, 0x02, 0x1f, 0x02,
    0x5d, 0x00, 0x72, 0x00, 0x20, 0x02, 0x21, 0x02, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00,
    0x22, 0x02, 0x23, 0x02, 0x24, 0x02, 0x5d, 0x00, 0x5d, 0x00, 0x25, 0x02, 0x26, 0x02, 0xd4, 0x00,
    0x27, 0x02, 0x64, 0x00, 0x65, 0x00, 0x28, 0x02, 0x29, 0x02, 0x2a, 0x02, 0x2b, 0x02, 0x2c, 0x02,
    0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00,
    0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x2d, 0x02, 0x2e, 0x02, 0x2f, 0x02, 0x30, 0x02, 0x9d, 0x00,
    0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x31, 0x02, 0x32, 0x02, 0xd4, 0x00, 0x9d, 0x00, 0x9d, 0x00,
    0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00,
    0x5d, 0x00, 0x5d, 0x00, 0x33, 0x02, 0x34, 0x02, 0x35, 0x02, 0x36, 0x02, 0x9d, 0x00, 0x9d, 0x00,
    0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x37, 0x02, 0x38, 0x02, 0xd4, 0x00, 0x39, 0x02, 0x9d, 0x00,
    0x5d, 0x00, 0x5d, 0x00, 0x3a, 0x02, 0x3b, 0x02, 0xd4, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00,
    0x5d, 0x00, 0xc0, 0x00, 0x3c, 0x02, 0x3d, 0x02, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00,
    0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00,
    0x5d, 0x00, 0x5d, 0x00, 0x20, 0x02, 0x3e, 0x02, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00,
    0x9d, 0x00, 0x9d, 0x00, 0x0b, 0x00, 0x0b, 0x00, 0x0d, 0x00, 0x0d, 0x00, 0xa5, 0x00, 0x3f, 0x02,
    0x40, 0x02, 0x41, 0x02, 0x5d, 0x00, 0x42, 0x02, 0x43, 0x02, 0xd4, 0x00, 0x9d, 0x00, 0x9d, 0x00,
    0x9d, 0x00, 0x9d, 0x00, 0x44, 0x02, 0x5d, 0x00, 0x5d, 0x00, 0x45, 0x02, 0x46, 0x02, 0x9d, 0x00,
    0x47, 0x02, 0x5d, 0x00, 0x5d, 0x00, 0x48, 0x02, 0x49, 0x02, 0x4a, 0x02, 0x5d, 0x00, 0x5d, 0x00,
    0x4b, 0x02, 0x4c, 0x02, 0x4d, 0x02, 0x9d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0xd8, 0x00,
    0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00,
    0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00,
    0x65, 0x00, 0x5d, 0x00, 0x33, 0x02, 0x4e, 0x02, 0x4f, 0x02, 0xa5, 0x00, 0xc2, 0x00, 0x50, 0x02,
    0x5d, 0x00, 0x51, 0x02, 0x52, 0x02, 0x53, 0x02, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00,
    0x54, 0x02, 0x5d, 0x00, 0x5d, 0x00, 0x55, 0x02, 0x56, 0x02, 0xd4, 0x00, 0x57, 0x02, 0x5d, 0x00,
    0x58, 0x02, 0x59, 0x02, 0xd4, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00,
    0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00,
    0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x5d, 0x00, 0x5a, 0x02,
    0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00,
    0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x75, 0x00, 0xce, 0x01, 0x5b, 0x02, 0x5c, 0x02, 0x5d, 0x02,
    0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00,
    0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00,
    0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00,
    0x5d, 0x00, 0xe3, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00,
    0x5e, 0x02, 0x5e, 0x02, 0x5e, 0x02, 0x5e, 0x02, 0x5e, 0x02, 0x5e, 0x02, 0x5f, 0x02, 0x60, 0x02,
    0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00,
    0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0xac, 0x01, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00,
    0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00,
    0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00,
    0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00,
    0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00,
    0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00,
    0x5d, 0x00, 0x5d, 0x00, 0xdc, 0x00, 0x61, 0x02, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00,
    0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00,
    0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00,
    0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00,
    0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5c, 0x01, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00,
    0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00,
    0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00,
    0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00,
    0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0xd8, 0x00, 0x5d, 0x00, 0xdc, 0x00, 0x99, 0x01, 0x9d, 0x00,
    0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x5d, 0x00, 0xe0, 0x00, 0x62, 0x02,
    0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x63, 0x02, 0x64, 0x02, 0x65, 0x02, 0x66, 0x02, 0x67, 0x02,
    0x5d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00,
    0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x0b, 0x00, 0x0b, 0x00, 0x0d, 0x00, 0x0d, 0x00,
    0xce, 0x01, 0x68, 0x02, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00,
    0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x69, 0x02, 0x6a, 0x02, 0x6b, 0x02, 0x6b, 0x02,
    0x6c, 0x02, 0x6d, 0x02, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x6e, 0x02, 0x6f, 0x02,
    0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00,
    0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00,
    0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00,
    0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0xe3, 0x01,
    0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00,
    0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0xdb, 0x00, 0x9d, 0x00, 0x9d, 0x00,
    0xd8, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00,
    0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00,
    0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00,
    0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00,
    0x5d, 0x00, 0xdc, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x70, 0x02, 0x71, 0x02, 0x5d, 0x00,
    0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00,
    0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00,
    0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0xe2, 0x00,
    0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00,
    0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00,
    0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0xcc, 0x01, 0xa8, 0x00,
    0xd8, 0x00, 0x72, 0x02, 0x73, 0x02, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00,
    0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00,
    0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00,
    0x34, 0x01, 0x34, 0x01, 0x34, 0x01, 0x34, 0x01, 0x34, 0x01, 0x34, 0x01, 0x34, 0x01, 0x34, 0x01,
    0x34, 0x01, 0x34, 0x01, 0x34, 0x01, 0x34, 0x01, 0x34, 0x01, 0x34, 0x01, 0x34, 0x01, 0x74, 0x02,
    0x34, 0x01, 0x34, 0x01, 0x75, 0x02, 0x34, 0x01, 0x34, 0x01, 0x34, 0x01, 0x76, 0x02, 0x77, 0x02,
    0x78, 0x02, 0x34, 0x01, 0x79, 0x02, 0x34, 0x01, 0x34, 0x01, 0x34, 0x01, 0x7a, 0x02, 0x9d, 0x00,
    0xe5, 0x00, 0xe5, 0x00, 0xe5, 0x00, 0xe5, 0x00, 0x7b, 0x02, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00,
    0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0xce, 0x01, 0x7c, 0x02,
    0xe5, 0x00, 0xe5, 0x00, 0xe5, 0x00, 0xe5, 0x00, 0xe5, 0x00, 0x3a, 0x01, 0xce, 0x01, 0x7d, 0x02,
    0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00,
    0x7e, 0x02, 0x7f, 0x02, 0x22, 0x00, 0x80, 0x02, 0x81, 0x02, 0x82, 0x02, 0x83, 0x02, 0x7e, 0x02,
    0x84, 0x02, 0x85, 0x02, 0x86, 0x02, 0x87, 0x02, 0x88, 0x02, 0x7e, 0x02, 0x7f, 0x02, 0x22, 0x00,
    0x89, 0x02, 0x8a, 0x02, 0x22, 0x00, 0x8b, 0x02, 0x8c, 0x02, 0x8d, 0x02, 0x8e, 0x02, 0x7e, 0x02,
    0x8f, 0x02, 0x22, 0x00, 0x7e, 0x02, 0x7f, 0x02, 0x22, 0x00, 0x80, 0x02, 0x81, 0x02, 0x22, 0x00,
    0x83, 0x02, 0x7e, 0x02, 0x84, 0x02, 0x8e, 0x02, 0x7e, 0x02, 0x8f, 0x02, 0x22, 0x00, 0x7e, 0x02,
    0x7f, 0x02, 0x22, 0x00, 0x90, 0x02, 0x7e, 0x02, 0x91, 0x02, 0x92, 0x02, 0x93, 0x02, 0x94, 0x02,
    0x22, 0x00, 0x95, 0x02, 0x7e, 0x02, 0x96, 0x02, 0x97, 0x02, 0x98, 0x02, 0x99, 0x02, 0x22, 0x00,
    0x9a, 0x02, 0x7e, 0x02, 0x9b, 0x02, 0x22, 0x00, 0x9c, 0x02, 0x9d, 0x02, 0x9d, 0x02, 0x9d, 0x02,
    0x34, 0x01, 0x34, 0x01, 0x34, 0x01, 0x34, 0x01, 0x34, 0x01, 0x34, 0x01, 0x34, 0x01, 0x34, 0x01,
    0x34, 0x01, 0x34, 0x01, 0x34, 0x01, 0x34, 0x01, 0x34, 0x01, 0x34, 0x01, 0x34, 0x01, 0x34, 0x01,
    0x34, 0x01, 0x34, 0x01, 0x34, 0x01, 0x34, 0x01, 0x34, 0x01, 0x34, 0x01, 0x34, 0x01, 0x34, 0x01,
    0x34, 0x01, 0x34, 0x01, 0x34, 0x01, 0x34, 0x01, 0x34, 0x01, 0x34, 0x01, 0x34, 0x01, 0x34, 0x01,
    0x28, 0x00, 0x28, 0x00, 0x28, 0x00, 0x9e, 0x02, 0x28, 0x00, 0x28, 0x00, 0x9f, 0x02, 0xa0, 0x02,
    0xa1, 0x02, 0xa2, 0x02, 0xa3, 0x02, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00,
    0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00,
    0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00,
    0xa4, 0x02, 0xa5, 0x02, 0xa6, 0x02, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00,
    0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00,
    0x5d, 0x00, 0x5d, 0x00, 0xa8, 0x00, 0xa7, 0x02, 0xa8, 0x02, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00,
    0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00,
    0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00,
    0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0xa9, 0x02, 0xaa, 0x02,
    0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00,
    0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00,
    0x3f, 0x00, 0x3f, 0x00, 0x3f, 0x00, 0x3f, 0x00, 0x3f, 0x00, 0x3f, 0x00, 0x3f, 0x00, 0x3f, 0x00,
    0x3f, 0x00, 0x3f, 0x00, 0x3f, 0x00, 0x3f, 0x00, 0xab, 0x02, 0xac, 0x02, 0x57, 0x00, 0x57, 0x00,
    0xad, 0x02, 0xad, 0x02, 0xae, 0x02, 0xaf, 0x02, 0xb0, 0x02, 0xb1, 0x02, 0x57, 0x00, 0x57, 0x00,
    0x57, 0x00, 0x57, 0x00, 0x57, 0x00, 0x57, 0x00, 0x57, 0x00, 0x57, 0x00, 0x57, 0x00, 0x57, 0x00,
    0x57, 0x00, 0x57, 0x00, 0x57, 0x00, 0x57, 0x00, 0x57, 0x00, 0x57, 0x00, 0x57, 0x00, 0x57, 0x00,
    0x57, 0x00, 0x57, 0x00, 0x57, 0x00, 0x57, 0x00, 0x57, 0x00, 0x57, 0x00, 0x57, 0x00, 0x57, 0x00,
    0x57, 0x00, 0x57, 0x00, 0x57, 0x00, 0x57, 0x00, 0x57, 0x00, 0x57, 0x00, 0x57, 0x00, 0x57, 0x00,
    0x57, 0x00, 0x57, 0x00, 0x57, 0x00, 0x57, 0x00, 0x57, 0x00, 0x57, 0x00, 0x57, 0x00, 0x57, 0x00,
    0x57, 0x00, 0x57, 0x00, 0x57, 0x00, 0x57, 0x00, 0x57, 0x00, 0x57, 0x00, 0x57, 0x00, 0xb2, 0x02,
    0xef, 0x01, 0xef, 0x01, 0xb3, 0x02, 0xb4, 0x02, 0x57, 0x00, 0x57, 0x00, 0x57, 0x00, 0x57, 0x00,
    0xb2, 0x02, 0xef, 0x01, 0xb5, 0x02, 0xb6, 0x02, 0x57, 0x00, 0x57, 0x00, 0x57, 0x00, 0x57, 0x00,
    0x57, 0x00, 0x57, 0x00, 0x57, 0x00, 0x57, 0x00, 0x57, 0x00, 0x57, 0x00, 0x57, 0x00, 0x57, 0x00,
    0xb7, 0x02, 0x3f, 0x00, 0xb8, 0x02, 0xb9, 0x02, 0xba, 0x02, 0xbb, 0x02, 0xbc, 0x02, 0xbd, 0x02,
    0xbe, 0x02, 0xbf, 0x02, 0xc0, 0x02, 0xbf, 0x02, 0x57, 0x00, 0x57, 0x00, 0x57, 0x00, 0xc1, 0x02,
    0x57, 0x00, 0x57, 0x00, 0x57, 0x00, 0x57, 0x00, 0x57, 0x00, 0x57, 0x00, 0x57, 0x00, 0x57, 0x00,
    0x57, 0x00, 0x57, 0x00, 0x57, 0x00, 0x57, 0x00, 0x57, 0x00, 0x57, 0x00, 0x57, 0x00, 0x57, 0x00,
    0xe5, 0x00, 0xe5, 0x00, 0x67, 0x01, 0xe5, 0x00, 0xe5, 0x00, 0xe5, 0x00, 0xe5, 0x00, 0xe5, 0x00,
    0xe5, 0x00, 0x65, 0x01, 0xc2, 0x02, 0xc3, 0x02, 0xc3, 0x02, 0xc3, 0x02, 0xe5, 0x00, 0x66, 0x01,
    0xc4, 0x02, 0x34, 0x01, 0x79, 0x01, 0x34, 0x01, 0x34, 0x01, 0x34, 0x01, 0xc5, 0x02, 0x34, 0x01,
    0x34, 0x01, 0x34, 0x01, 0xc6, 0x02, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0xc7, 0x02, 0x34, 0x01,
    0xc8, 0x02, 0x34, 0x01, 0x34, 0x01, 0xc9, 0x02, 0x7a, 0x02, 0xca, 0x02, 0x66, 0x01, 0x9d, 0x00,
    0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00,
    0xe5, 0x00, 0xe5, 0x00, 0xe5, 0x00, 0xe5, 0x00, 0xe5, 0x00, 0xe5, 0x00, 0xe5, 0x00, 0xe5, 0x00,
    0xe5, 0x00, 0xe5, 0x00, 0xe5, 0x00, 0xe5, 0x00, 0xe5, 0x00, 0xe5, 0x00, 0xe5, 0x00, 0xcb, 0x02,
    0xe5, 0x00, 0xe5, 0x00, 0xe5, 0x00, 0xe5, 0x00, 0xe5, 0x00, 0xe5, 0x00, 0xe5, 0x00, 0xe5, 0x00,
    0xe5, 0x00, 0xe5, 0x00, 0xe5, 0x00, 0xe5, 0x00, 0xe5, 0x00, 0xe5, 0x00, 0xe5, 0x00, 0xe5, 0x00,
    0xe5, 0x00, 0xe5, 0x00, 0xe5, 0x00, 0xe5, 0x00, 0xe5, 0x00, 0xe5, 0x00, 0xe5, 0x00, 0xe5, 0x00,
    0xe5, 0x00, 0xe5, 0x00, 0xe5, 0x00, 0xe5, 0x00, 0xe5, 0x00, 0xe5, 0x00, 0xe5, 0x00, 0xe5, 0x00,
    0xe5, 0x00, 0xe5, 0x00, 0xe5, 0x00, 0xe5, 0x00, 0xe5, 0x00, 0xe5, 0x00, 0xe5, 0x00, 0xe5, 0x00,
    0xe5, 0x00, 0xe5, 0x00, 0xe5, 0x00, 0xe5, 0x00, 0xe5, 0x00, 0xcc, 0x02, 0xd3, 0x01, 0xd3, 0x01,
    0xe5, 0x00, 0xe5, 0x00, 0xe5, 0x00, 0xe5, 0x00, 0xe5, 0x00, 0xe5, 0x00, 0xe5, 0x00, 0x65, 0x01,
    0xe5, 0x00, 0xe5, 0x00, 0xe5, 0x00, 0xe5, 0x00, 0xe5, 0x00, 0xcd, 0x02, 0x67, 0x01, 0x9d, 0x00,
    0x67, 0x01, 0xe5, 0x00, 0xe5, 0x00, 0xe5, 0x00, 0xcc, 0x02, 0xc3, 0x00, 0xe5, 0x00, 0xe5, 0x00,
    0xcc, 0x02, 0xe5, 0x00, 0xce, 0x02, 0xcf, 0x02, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00,
    0xe5, 0x00, 0xe5, 0x00, 0xe5, 0x00, 0xe5, 0x00, 0xe5, 0x00, 0xe5, 0x00, 0xe5, 0x00, 0xd0, 0x02,
    0xe5, 0x00, 0xe5, 0x00, 0xe5, 0x00, 0xe5, 0x00, 0xd1, 0x02, 0xe5, 0x00, 0xe5, 0x00, 0xe5, 0x00,
    0xe5, 0x00, 0xe5, 0x00, 0xe5, 0x00, 0xe5, 0x00, 0xe5, 0x00, 0x65, 0x01, 0xce, 0x02, 0xd2, 0x02,
    0x3a, 0x01, 0xe5, 0x00, 0xcd, 0x02, 0x3a, 0x01, 0xd3, 0x02, 0x3a, 0x01, 0x9d, 0x00, 0x9d, 0x00,
    0xe5, 0x00, 0xe5, 0x00, 0xe5, 0x00, 0xe5, 0x00, 0xe5, 0x00, 0xe5, 0x00, 0xe5, 0x00, 0xe5, 0x00,
    0xe5, 0x00, 0xd4, 0x02, 0xe5, 0x00, 0xe5, 0x00, 0x3b, 0x01, 0x9d, 0x00, 0x9d, 0x00, 0xd5, 0x02,
    0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00,
    0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00,
    0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00,
    0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0xd6, 0x02,
    0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00,
    0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0xe0, 0x00, 0x9d, 0x00, 0x9d, 0x00,
    0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00,
    0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00,
    0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00,
    0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00,
    0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0xe1, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00,
    0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00,
    0x5d, 0x00, 0xe0, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00,
    0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00,
    0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00,
    0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00,
    0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00,
    0x5d, 0x00, 0x5d, 0x00, 0x30, 0x02, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00,
    0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00,
    0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00,
    0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00,
    0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00,
    0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00,
    0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x75, 0x00, 0x9d, 0x00,
    0x5d, 0x00, 0xe0, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00,
    0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00,
    0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00,
    0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00,
    0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00,
    0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00,
    0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0x5d, 0x00, 0xcc, 0x01, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00,
    0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00, 0x9d, 0x00,
    0xd7, 0x02, 0x1f, 0x01, 0xd8, 0x02, 0xd8, 0x02, 0xd8, 0x02, 0xd8, 0x02, 0xd8, 0x02, 0xd8, 0x02,
    0x1f, 0x01, 0x1f, 0x01, 0x1f, 0x01, 0x1f, 0x01, 0x1f, 0x01, 0x1f, 0x01, 0x1f, 0x01, 0x1f, 0x01,
    0x28, 0x00, 0x28, 0x00, 0x28, 0x00, 0x28, 0x00, 0x28, 0x00, 0x28, 0x00, 0x28, 0x00, 0x28, 0x00,
    0x28, 0x00, 0x28, 0x00, 0x28, 0x00, 0x28, 0x00, 0x28, 0x00, 0x28, 0x00, 0x28, 0x00, 0x1f, 0x01,
    0x1f, 0x01, 0x1f, 0x01, 0x1f, 0x01, 0x1f, 0x01, 0x1f, 0x01, 0x1f, 0x01, 0x1f, 0x01, 0x1f, 0x01,
    0x1f, 0x01, 0x1f, 0x01, 0x1f, 0x01, 0x1f, 0x01, 0x1f, 0x01, 0x1f, 0x01, 0x1f, 0x01, 0x1f, 0x01,
    0x1f, 0x01, 0x1f, 0x01, 0x1f, 0x01, 0x1f, 0x01, 0x1f, 0x01, 0x1f, 0x01, 0x1f, 0x01, 0x1f, 0x01,
    0x1f, 0x01, 0x1f, 0x01, 0x1f, 0x01, 0x1f, 0x01, 0x1f, 0x01, 0x1f, 0x01, 0x1f, 0x01, 0x1f, 0x01,
    0xaf, 0x01, 0xaf, 0x01, 0xaf, 0x01, 0xaf, 0x01, 0xaf, 0x01, 0xaf, 0x01, 0xaf, 0x01, 0xaf, 0x01,
    0xaf, 0x01, 0xaf, 0x01, 0xaf, 0x01, 0xaf, 0x01, 0xaf, 0x01, 0xaf, 0x01, 0xaf, 0x01, 0xaf, 0x01,
    0xaf, 0x01, 0xaf, 0x01, 0xaf, 0x01, 0xaf, 0x01, 0xaf, 0x01, 0xaf, 0x01, 0xaf, 0x01, 0xaf, 0x01,
    0xaf, 0x01, 0xaf, 0x01, 0xaf, 0x01, 0xaf, 0x01, 0xaf, 0x01, 0xaf, 0x01, 0xaf, 0x01, 0xd9, 0x02
};

unsigned char CharUtil::CategoryCasingLevel3Index[11680] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x02, 0x03, 0x03, 0x03, 0x04, 0x03, 0x03, 0x03, 0x05, 0x06, 0x03, 0x07, 0x03, 0x08, 0x03, 0x03,
    0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x03, 0x03, 0x07, 0x07, 0x07, 0x03,
    0x03, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a,
    0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x05, 0x03, 0x06, 0x0b, 0x0c,
    0x0b, 0x0d, 0x0d, 0x0d, 0x0d, 0x0d, 0x0d, 0x0d, 0x0d, 0x0d, 0x0d, 0x0d, 0x0d, 0x0d, 0x0d, 0x0d,
    0x0d, 0x0d, 0x0d, 0x0d, 0x0d, 0x0d, 0x0d, 0x0d, 0x0d, 0x0d, 0x0d, 0x05, 0x07, 0x06, 0x07, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x02, 0x03, 0x04, 0x04, 0x04, 0x04, 0x0e, 0x03, 0x0b, 0x0e, 0x0f, 0x10, 0x07, 0x11, 0x0e, 0x0b,
    0x0e, 0x07, 0x12, 0x12, 0x0b, 0x13, 0x03, 0x03, 0x0b, 0x12, 0x0f, 0x14, 0x12, 0x12, 0x12, 0x03,
    0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a,
    0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x07, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x15,
    0x0d, 0x0d, 0x0d, 0x0d, 0x0d, 0x0d, 0x0d, 0x0d, 0x0d, 0x0d, 0x0d, 0x0d, 0x0d, 0x0d, 0x0d, 0x0d,
    0x0d, 0x0d, 0x0d, 0x0d, 0x0d, 0x0d, 0x0d, 0x07, 0x0d, 0x0d, 0x0d, 0x0d, 0x0d, 0x0d, 0x0d, 0x16,
    0x17, 0x18, 0x17, 0x18, 0x17, 0x18, 0x17, 0x18, 0x17, 0x18, 0x17, 0x18, 0x17, 0x18, 0x17, 0x18,
    0x19, 0x15, 0x17, 0x18, 0x17, 0x18, 0x17, 0x18, 0x15, 0x17, 0x18, 0x17, 0x18, 0x17, 0x18, 0x17,
    0x18, 0x17, 0x18, 0x17, 0x18, 0x17, 0x18, 0x17, 0x18, 0x15, 0x17, 0x18, 0x17, 0x18, 0x17, 0x18,
    0x17, 0x18, 0x17, 0x18, 0x17, 0x18, 0x17, 0x18, 0x1a, 0x17, 0x18, 0x17, 0x18, 0x17, 0x18, 0x15,
    0x1b, 0x1c, 0x17, 0x18, 0x17, 0x18, 0x1d, 0x17, 0x18, 0x1e, 0x1e, 0x17, 0x18, 0x15, 0x1f, 0x20,
    0x21, 0x17, 0x18, 0x1e, 0x22, 0x23, 0x24, 0x25, 0x17, 0x18, 0x26, 0x15, 0x24, 0x27, 0x28, 0x29,
    0x17, 0x18, 0x17, 0x18, 0x17, 0x18, 0x2a, 0x17, 0x18, 0x2a, 0x15, 0x15, 0x17, 0x18, 0x2a, 0x17,
    0x18, 0x2b, 0x2b, 0x17, 0x18, 0x17, 0x18, 0x2c, 0x17, 0x18, 0x15, 0x0f, 0x17, 0x18, 0x15, 0x2d,
    0x0f, 0x0f, 0x0f, 0x0f, 0x2e, 0x2f, 0x30, 0x2e, 0x2f, 0x30, 0x2e, 0x2f, 0x30, 0x17, 0x18, 0x17,
    0x18, 0x17, 0x18, 0x17, 0x18, 0x17, 0x18, 0x17, 0x18, 0x17, 0x18, 0x17, 0x18, 0x31, 0x17, 0x18,
    0x15, 0x2e, 0x2f, 0x30, 0x17, 0x18, 0x32, 0x33, 0x17, 0x18, 0x17, 0x18, 0x17, 0x18, 0x17, 0x18,
    0x34, 0x15, 0x17, 0x18, 0x17, 0x18, 0x17, 0x18, 0x17, 0x18, 0x17, 0x18, 0x17, 0x18, 0x17, 0x18,
    0x17, 0x18, 0x17, 0x18, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x35, 0x17, 0x18, 0x36, 0x37, 0x38,
    0x38, 0x17, 0x18, 0x39, 0x3a, 0x3b, 0x17, 0x18, 0x17, 0x18, 0x17, 0x18, 0x17, 0x18, 0x17, 0x18,
    0x3c, 0x3d, 0x3e, 0x3f, 0x40, 0x15, 0x41, 0x41, 0x15, 0x42, 0x15, 0x43, 0x44, 0x15, 0x15, 0x15,
    0x41, 0x45, 0x15, 0x46, 0x15, 0x47, 0x48, 0x15, 0x49, 0x4a, 0x48, 0x4b, 0x4c, 0x15, 0x15, 0x4a,
    0x15, 0x4d, 0x4e, 0x15, 0x15, 0x4f, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x50, 0x15, 0x15,
    0x51, 0x15, 0x52, 0x51, 0x15, 0x15, 0x15, 0x53, 0x51, 0x54, 0x55, 0x55, 0x56, 0x15, 0x15, 0x15,
    0x15, 0x15, 0x57, 0x15, 0x0f, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x58, 0x59, 0x15,
    0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15,
    0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5b, 0x5b, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a,
    0x5a, 0x5a, 0x0b, 0x0b, 0x0b, 0x0b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b,
    0x5a, 0x5a, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
    0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x5b, 0x0b, 0x5a, 0x0b,
    0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
    0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c,
    0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5d, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c,
    0x17, 0x18, 0x17, 0x18, 0x5b, 0x0b, 0x17, 0x18, 0x5e, 0x5e, 0x5a, 0x28, 0x28, 0x28, 0x03, 0x5f,
    0x5e, 0x5e, 0x5e, 0x5e, 0x0b, 0x0b, 0x60, 0x03, 0x61, 0x61, 0x61, 0x5e, 0x62, 0x5e, 0x63, 0x63,
    0x15, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a,
    0x0a, 0x0a, 0x5e, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x64, 0x65, 0x65, 0x65,
    0x15, 0x0d, 0x0d, 0x0d, 0x0d, 0x0d, 0x0d, 0x0d, 0x0d, 0x0d, 0x0d, 0x0d, 0x0d, 0x0d, 0x0d, 0x0d,
    0x0d, 0x0d, 0x66, 0x0d, 0x0d, 0x0d, 0x0d, 0x0d, 0x0d, 0x0d, 0x0d, 0x0d, 0x67, 0x68, 0x68, 0x69,
    0x6a, 0x6b, 0x19, 0x19, 0x19, 0x6c, 0x6d, 0x6e, 0x17, 0x18, 0x17, 0x18, 0x17, 0x18, 0x17, 0x18,
    0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x07, 0x17, 0x18, 0x75, 0x17, 0x18, 0x15, 0x34, 0x34, 0x34,
    0x76, 0x76, 0x76, 0x76, 0x76, 0x76, 0x76, 0x76, 0x76, 0x76, 0x76, 0x76, 0x76, 0x76, 0x76, 0x76,
    0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77,
    0x17, 0x18, 0x78, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x79, 0x79, 0x17, 0x18, 0x17, 0x18, 0x17, 0x18,
    0x7a, 0x17, 0x18, 0x17, 0x18, 0x17, 0x18, 0x17, 0x18, 0x17, 0x18, 0x17, 0x18, 0x17, 0x18, 0x7b,
    0x5e, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c,
    0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c,
    0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x5e, 0x5e, 0x5a, 0x7d, 0x7d, 0x7d, 0x7d, 0x7d, 0x7d,
    0x15, 0x7e, 0x7e, 0x7e, 0x7e, 0x7e, 0x7e, 0x7e, 0x7e, 0x7e, 0x7e, 0x7e, 0x7e, 0x7e, 0x7e, 0x7e,
    0x7e, 0x7e, 0x7e, 0x7e, 0x7e, 0x7e, 0x7e, 0x7e, 0x7e, 0x7e, 0x7e, 0x7e, 0x7e, 0x7e, 0x7e, 0x7e,
    0x7e, 0x7e, 0x7e, 0x7e, 0x7e, 0x7e, 0x7e, 0x15, 0x15, 0x7d, 0x08, 0x5e, 0x5e, 0x0e, 0x0e, 0x04,
    0x7f, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c,
    0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x80, 0x5c,
    0x81, 0x5c, 0x5c, 0x81, 0x5c, 0x5c, 0x81, 0x5c, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f,
    0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82,
    0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x7f, 0x7f, 0x7f, 0x7f, 0x82,
    0x82, 0x82, 0x82, 0x81, 0x81, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f,
    0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x07, 0x07, 0x83, 0x03, 0x03, 0x84, 0x03, 0x81, 0x0e, 0x0e,
    0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x81, 0x85, 0x7f, 0x81, 0x81,
    0x86, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c,
    0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x03, 0x03, 0x03, 0x81, 0x82, 0x82,
    0x5c, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82,
    0x82, 0x82, 0x82, 0x82, 0x81, 0x82, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x11, 0x0e, 0x5c,
    0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x86, 0x86, 0x5c, 0x5c, 0x0e, 0x5c, 0x5c, 0x5c, 0x5c, 0x82, 0x82,
    0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x82, 0x82, 0x82, 0x87, 0x87, 0x82,
    0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x7f, 0x85,
    0x82, 0x5c, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82,
    0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x7f, 0x7f, 0x82, 0x82, 0x82,
    0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c,
    0x5c, 0x82, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f,
    0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82,
    0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c,
    0x5c, 0x5c, 0x5c, 0x5c, 0x86, 0x86, 0x0e, 0x03, 0x03, 0x03, 0x86, 0x7f, 0x7f, 0x5c, 0x84, 0x84,
    0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x5c, 0x5c, 0x5c, 0x5c, 0x86, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c,
    0x5c, 0x5c, 0x5c, 0x5c, 0x86, 0x5c, 0x5c, 0x5c, 0x86, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x7f, 0x7f,
    0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x7f,
    0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x5c, 0x5c, 0x5c, 0x7f, 0x7f, 0x81, 0x7f,
    0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f,
    0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f,
    0x82, 0x82, 0x82, 0x82, 0x82, 0x7f, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82,
    0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f,
    0x7f, 0x7f, 0x7f, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c,
    0x5c, 0x5c, 0x11, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c,
    0x5c, 0x5c, 0x5c, 0x89, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f,
    0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f,
    0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x5c, 0x89, 0x5c, 0x0f, 0x89, 0x89,
    0x89, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x89, 0x89, 0x89, 0x89, 0x5c, 0x89, 0x89,
    0x0f, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f,
    0x0f, 0x0f, 0x5c, 0x5c, 0x7d, 0x7d, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a,
    0x7d, 0x5a, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f,
    0x0f, 0x5c, 0x89, 0x89, 0x5e, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x5e, 0x5e, 0x0f,
    0x0f, 0x5e, 0x5e, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f,
    0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x5e, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f,
    0x0f, 0x5e, 0x0f, 0x5e, 0x5e, 0x5e, 0x0f, 0x0f, 0x0f, 0x0f, 0x5e, 0x5e, 0x5c, 0x0f, 0x89, 0x89,
    0x89, 0x5c, 0x5c, 0x5c, 0x5c, 0x5e, 0x5e, 0x89, 0x89, 0x5e, 0x5e, 0x89, 0x89, 0x5c, 0x0f, 0x5e,
    0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x89, 0x5e, 0x5e, 0x5e, 0x5e, 0x0f, 0x0f, 0x5e, 0x0f,
    0x0f, 0x0f, 0x5c, 0x5c, 0x5e, 0x5e, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a,
    0x0f, 0x0f, 0x04, 0x04, 0x8b, 0x8b, 0x8b, 0x8b, 0x8b, 0x8b, 0x78, 0x04, 0x0f, 0x7d, 0x5c, 0x5e,
    0x5e, 0x5c, 0x5c, 0x89, 0x5e, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x5e, 0x5e, 0x5e, 0x5e, 0x0f,
    0x0f, 0x5e, 0x0f, 0x0f, 0x5e, 0x0f, 0x0f, 0x5e, 0x0f, 0x0f, 0x5e, 0x5e, 0x5c, 0x5e, 0x89, 0x89,
    0x89, 0x5c, 0x5c, 0x5e, 0x5e, 0x5e, 0x5e, 0x5c, 0x5c, 0x5e, 0x5e, 0x5c, 0x5c, 0x5c, 0x5e, 0x5e,
    0x5e, 0x5c, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x0f, 0x0f, 0x0f, 0x0f, 0x5e, 0x0f, 0x5e,
    0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a,
    0x5c, 0x5c, 0x0f, 0x0f, 0x0f, 0x5c, 0x7d, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e,
    0x5e, 0x5c, 0x5c, 0x89, 0x5e, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x5e, 0x0f,
    0x0f, 0x0f, 0x5e, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f,
    0x0f, 0x5e, 0x0f, 0x0f, 0x5e, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x5e, 0x5e, 0x5c, 0x0f, 0x89, 0x89,
    0x89, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5e, 0x5c, 0x5c, 0x89, 0x5e, 0x89, 0x89, 0x5c, 0x5e, 0x5e,
    0x0f, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e,
    0x7d, 0x04, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x0f, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c,
    0x5e, 0x5c, 0x89, 0x89, 0x5e, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x5e, 0x5e, 0x0f,
    0x0f, 0x5e, 0x0f, 0x0f, 0x5e, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x5e, 0x5e, 0x5c, 0x0f, 0x89, 0x5c,
    0x89, 0x5c, 0x5c, 0x5c, 0x5c, 0x5e, 0x5e, 0x89, 0x89, 0x5e, 0x5e, 0x89, 0x89, 0x5c, 0x5e, 0x5e,
    0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5c, 0x5c, 0x89, 0x5e, 0x5e, 0x5e, 0x5e, 0x0f, 0x0f, 0x5e, 0x0f,
    0x78, 0x0f, 0x8b, 0x8b, 0x8b, 0x8b, 0x8b, 0x8b, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e,
    0x5e, 0x5e, 0x5c, 0x0f, 0x5e, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x5e, 0x5e, 0x5e, 0x0f, 0x0f,
    0x0f, 0x5e, 0x0f, 0x0f, 0x0f, 0x0f, 0x5e, 0x5e, 0x5e, 0x0f, 0x0f, 0x5e, 0x0f, 0x5e, 0x0f, 0x0f,
    0x5e, 0x5e, 0x5e, 0x0f, 0x0f, 0x5e, 0x5e, 0x5e, 0x0f, 0x0f, 0x0f, 0x5e, 0x5e, 0x5e, 0x0f, 0x0f,
    0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x5e, 0x5e, 0x5e, 0x5e, 0x89, 0x89,
    0x5c, 0x89, 0x89, 0x5e, 0x5e, 0x5e, 0x89, 0x89, 0x89, 0x5e, 0x89, 0x89, 0x89, 0x5c, 0x5e, 0x5e,
    0x0f, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x89, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e,
    0x8b, 0x8b, 0x8b, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x04, 0x0e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e,
    0x5c, 0x89, 0x89, 0x89, 0x5c, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x5e, 0x0f, 0x0f,
    0x0f, 0x5e, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f,
    0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x5e, 0x5e, 0x5e, 0x0f, 0x5c, 0x5c,
    0x5c, 0x89, 0x89, 0x89, 0x89, 0x5e, 0x5c, 0x5c, 0x5c, 0x5e, 0x5c, 0x5c, 0x5c, 0x5c, 0x5e, 0x5e,
    0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5c, 0x5c, 0x5e, 0x0f, 0x0f, 0x0f, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e,
    0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x7d, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x78,
    0x0f, 0x5c, 0x89, 0x89, 0x7d, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x5e, 0x0f, 0x0f,
    0x0f, 0x0f, 0x0f, 0x0f, 0x5e, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x5e, 0x5e, 0x5c, 0x0f, 0x89, 0x8c,
    0x89, 0x89, 0x89, 0x89, 0x89, 0x5e, 0x8c, 0x89, 0x89, 0x5e, 0x89, 0x89, 0x5c, 0x5c, 0x5e, 0x5e,
    0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x89, 0x89, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x0f, 0x5e,
    0x5e, 0x0f, 0x0f, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e,
    0x5c, 0x5c, 0x89, 0x89, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x5e, 0x0f, 0x0f,
    0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x5c, 0x5c, 0x0f, 0x89, 0x89,
    0x89, 0x5c, 0x5c, 0x5c, 0x5c, 0x5e, 0x89, 0x89, 0x89, 0x5e, 0x89, 0x89, 0x89, 0x5c, 0x0f, 0x78,
    0x5e, 0x5e, 0x5e, 0x5e, 0x0f, 0x0f, 0x0f, 0x89, 0x8b, 0x8b, 0x8b, 0x8b, 0x8b, 0x8b, 0x8b, 0x0f,
    0x8b, 0x8b, 0x8b, 0x8b, 0x8b, 0x8b, 0x8b, 0x8b, 0x8b, 0x78, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f,
    0x5e, 0x5c, 0x89, 0x89, 0x5e, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f,
    0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x5e, 0x5e, 0x5e, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f,
    0x0f, 0x0f, 0x5e, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x5e, 0x0f, 0x5e, 0x5e,
    0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x5e, 0x5e, 0x5e, 0x5c, 0x5e, 0x5e, 0x5e, 0x5e, 0x89,
    0x89, 0x89, 0x5c, 0x5c, 0x5c, 0x5e, 0x5c, 0x5e, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89,
    0x5e, 0x5e, 0x89, 0x89, 0x7d, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e,
    0x5e, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f,
    0x0f, 0x5c, 0x0f, 0x0f, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5e, 0x5e, 0x5e, 0x5e, 0x04,
    0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x5a, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x7d,
    0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x7d, 0x7d, 0x5e, 0x5e, 0x5e, 0x5e,
    0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e,
    0x5e, 0x0f, 0x0f, 0x5e, 0x0f, 0x5e, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x5e, 0x0f, 0x0f, 0x0f, 0x0f,
    0x0f, 0x0f, 0x0f, 0x0f, 0x5e, 0x0f, 0x5e, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f,
    0x0f, 0x5c, 0x0f, 0x0f, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x0f, 0x5e, 0x5e,
    0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x5e, 0x5a, 0x5e, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5e, 0x5e,
    0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x5e, 0x5e, 0x0f, 0x0f, 0x0f, 0x0f,
    0x0f, 0x78, 0x78, 0x78, 0x7d, 0x7d, 0x7d, 0x7d, 0x7d, 0x7d, 0x7d, 0x7d, 0x7d, 0x7d, 0x7d, 0x7d,
    0x7d, 0x7d, 0x7d, 0x78, 0x7d, 0x78, 0x78, 0x78, 0x5c, 0x5c, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78,
    0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8b, 0x8b, 0x8b, 0x8b, 0x8b, 0x8b,
    0x8b, 0x8b, 0x8b, 0x8b, 0x78, 0x5c, 0x78, 0x5c, 0x78, 0x5c, 0x05, 0x06, 0x05, 0x06, 0x89, 0x89,
    0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x5e, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f,
    0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x5e, 0x5e, 0x5e,
    0x5e, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x89,
    0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x7d, 0x5c, 0x5c, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x5c, 0x5c, 0x5c,
    0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5e, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c,
    0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5e, 0x78, 0x78,
    0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x5c, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x5e, 0x78, 0x78,
    0x7d, 0x7d, 0x7d, 0x7d, 0x7d, 0x78, 0x78, 0x78, 0x78, 0x7d, 0x7d, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e,
    0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x89, 0x89, 0x5c, 0x5c, 0x5c,
    0x5c, 0x89, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x89, 0x5c, 0x5c, 0x89, 0x89, 0x5c, 0x5c, 0x0f,
    0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x7d, 0x7d, 0x7d, 0x7d, 0x7d, 0x7d,
    0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x89, 0x89, 0x5c, 0x5c, 0x0f, 0x0f, 0x0f, 0x0f, 0x5c, 0x5c,
    0x5c, 0x0f, 0x89, 0x89, 0x89, 0x0f, 0x0f, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x0f, 0x0f,
    0x0f, 0x5c, 0x5c, 0x5c, 0x5c, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f,
    0x0f, 0x0f, 0x5c, 0x89, 0x89, 0x5c, 0x5c, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x5c, 0x0f, 0x89,
    0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x89, 0x89, 0x89, 0x5c, 0x78, 0x78,
    0x8d, 0x8d, 0x8d, 0x8d, 0x8d, 0x8d, 0x8d, 0x8d, 0x8d, 0x8d, 0x8d, 0x8d, 0x8d, 0x8d, 0x8d, 0x8d,
    0x8d, 0x8d, 0x8d, 0x8d, 0x8d, 0x8d, 0x5e, 0x8d, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x8d, 0x5e, 0x5e,
    0x8e, 0x8e, 0x8e, 0x8e, 0x8e, 0x8e, 0x8e, 0x8e, 0x8e, 0x8e, 0x8e, 0x8e, 0x8e, 0x8e, 0x8e, 0x8e,
    0x8e, 0x8e, 0x8e, 0x8e, 0x8e, 0x8e, 0x8e, 0x8e, 0x8e, 0x8e, 0x8e, 0x7d, 0x5a, 0x8e, 0x8e, 0x8e,
    0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x5e, 0x0f, 0x0f, 0x0f, 0x0f, 0x5e, 0x5e,
    0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x5e, 0x0f, 0x5e, 0x0f, 0x0f, 0x0f, 0x0f, 0x5e, 0x5e,
    0x0f, 0x5e, 0x0f, 0x0f, 0x0f, 0x0f, 0x5e, 0x5e, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x5e,
    0x0f, 0x5e, 0x0f, 0x0f, 0x0f, 0x0f, 0x5e, 0x5e, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f,
    0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x5e, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f,
    0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x5e, 0x5e, 0x5c, 0x5c, 0x5c,
    0x7d, 0x7d, 0x7d, 0x7d, 0x7d, 0x7d, 0x7d, 0x7d, 0x7d, 0x8b, 0x8b, 0x8b, 0x8b, 0x8b, 0x8b, 0x8b,
    0x8b, 0x8b, 0x8b, 0x8b, 0x8b, 0x8b, 0x8b, 0x8b, 0x8b, 0x8b, 0x8b, 0x8b, 0x8b, 0x5e, 0x5e, 0x5e,
    0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e,
    0x8f, 0x8f, 0x8f, 0x8f, 0x8f, 0x8f, 0x8f, 0x8f, 0x8f, 0x8f, 0x8f, 0x8f, 0x8f, 0x8f, 0x8f, 0x8f,
    0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x5e, 0x5e, 0x91, 0x91, 0x91, 0x91, 0x91, 0x91, 0x5e, 0x5e,
    0x08, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f,
    0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x78, 0x7d, 0x0f,
    0x02, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f,
    0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x05, 0x06, 0x5e, 0x5e, 0x5e,
    0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x7d, 0x7d, 0x7d, 0x92, 0x92,
    0x92, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e,
    0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x5e, 0x0f, 0x0f,
    0x0f, 0x0f, 0x5c, 0x5c, 0x5c, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e,
    0x0f, 0x0f, 0x5c, 0x5c, 0x5c, 0x7d, 0x7d, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e,
    0x0f, 0x0f, 0x5c, 0x5c, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e,
    0x0f, 0x5e, 0x5c, 0x5c, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e,
    0x0f, 0x0f, 0x0f, 0x0f, 0x5c, 0x5c, 0x89, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x89, 0x89,
    0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x5c, 0x89, 0x89, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c,
    0x5c, 0x5c, 0x5c, 0x5c, 0x7d, 0x7d, 0x7d, 0x5a, 0x7d, 0x7d, 0x7d, 0x04, 0x0f, 0x5c, 0x5e, 0x5e,
    0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e,
    0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e,
    0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x08, 0x03, 0x03, 0x03, 0x03, 0x5c, 0x5c, 0x5c, 0x11, 0x5e,
    0x0f, 0x0f, 0x0f, 0x5a, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f,
    0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e,
    0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x5c, 0x5c, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f,
    0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x5c, 0x0f, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e,
    0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e,
    0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x5e,
    0x5c, 0x5c, 0x5c, 0x89, 0x89, 0x89, 0x89, 0x5c, 0x5c, 0x89, 0x89, 0x89, 0x5e, 0x5e, 0x5e, 0x5e,
    0x89, 0x89, 0x5c, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x5c, 0x5c, 0x5c, 0x5e, 0x5e, 0x5e, 0x5e,
    0x0e, 0x5e, 0x5e, 0x5e, 0x03, 0x03, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a,
    0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x5e, 0x5e,
    0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e,
    0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x5e, 0x5e, 0x5e, 0x5e,
    0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e,
    0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8b, 0x5e, 0x5e, 0x5e, 0x0e, 0x0e,
    0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e,
    0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x5c, 0x5c, 0x89, 0x89, 0x5c, 0x5e, 0x5e, 0x7d, 0x7d,
    0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x89, 0x5c, 0x89, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5e,
    0x5c, 0x89, 0x5c, 0x89, 0x89, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x89, 0x89, 0x89,
    0x89, 0x89, 0x89, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5e, 0x5e, 0x5c,
    0x7d, 0x7d, 0x7d, 0x7d, 0x7d, 0x7d, 0x7d, 0x5a, 0x7d, 0x7d, 0x7d, 0x7d, 0x7d, 0x7d, 0x5e, 0x5e,
    0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x79, 0x5c,
    0x5c, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e,
    0x5c, 0x5c, 0x5c, 0x5c, 0x89, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f,
    0x0f, 0x0f, 0x0f, 0x0f, 0x5c, 0x89, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x89, 0x5c, 0x89, 0x89, 0x89,
    0x89, 0x89, 0x5c, 0x89, 0x89, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x5e, 0x5e, 0x5e, 0x5e,
    0x7d, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c,
    0x5c, 0x5c, 0x5c, 0x5c, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x5e, 0x5e, 0x5e,
    0x5c, 0x5c, 0x89, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f,
    0x0f, 0x89, 0x5c, 0x5c, 0x5c, 0x5c, 0x89, 0x89, 0x5c, 0x5c, 0x89, 0x5c, 0x5c, 0x5c, 0x0f, 0x0f,
    0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f,
    0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x5c, 0x89, 0x5c, 0x5c, 0x89, 0x89, 0x89, 0x5c, 0x89, 0x5c,
    0x5c, 0x5c, 0x89, 0x89, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x7d, 0x7d, 0x7d, 0x7d,
    0x0f, 0x0f, 0x0f, 0x0f, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x5c, 0x5c, 0x5c, 0x5c,
    0x5c, 0x5c, 0x5c, 0x5c, 0x89, 0x89, 0x5c, 0x5c, 0x5e, 0x5e, 0x5e, 0x7d, 0x7d, 0x7d, 0x7d, 0x7d,
    0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x5e, 0x5e, 0x5e, 0x0f, 0x0f, 0x0f,
    0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x7d, 0x7d,
    0x93, 0x94, 0x95, 0x96, 0x96, 0x97, 0x98, 0x99, 0x9a, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e,
    0x9b, 0x9b, 0x9b, 0x9b, 0x9b, 0x9b, 0x9b, 0x9b, 0x9b, 0x9b, 0x9b, 0x9b, 0x9b, 0x9b, 0x9b, 0x9b,
    0x9b, 0x9b, 0x9b, 0x9b, 0x9b, 0x9b, 0x9b, 0x9b, 0x9b, 0x9b, 0x9b, 0x5e, 0x5e, 0x9b, 0x9b, 0x9b,
    0x7d, 0x7d, 0x7d, 0x7d, 0x7d, 0x7d, 0x7d, 0x7d, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e,
    0x5c, 0x5c, 0x5c, 0x7d, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c,
    0x5c, 0x89, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x0f, 0x0f, 0x0f, 0x0f, 0x5c, 0x0f, 0x0f,
    0x0f, 0x0f, 0x0f, 0x0f, 0x5c, 0x0f, 0x0f, 0x89, 0x5c, 0x5c, 0x0f, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e,
    0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x5a, 0x5a, 0x5a, 0x5a,
    0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a,
    0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x15, 0x15, 0x15, 0x15, 0x15,
    0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x5a, 0x9c, 0x15, 0x15, 0x15, 0x9d, 0x15, 0x15,
    0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x9e, 0x15,
    0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a,
    0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5e, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c,
    0x17, 0x18, 0x17, 0x18, 0x17, 0x18, 0x15, 0x15, 0x15, 0x15, 0x15, 0x9f, 0x15, 0x15, 0xa0, 0x15,
    0xa1, 0xa1, 0xa1, 0xa1, 0xa1, 0xa1, 0xa1, 0xa1, 0xa2, 0xa2, 0xa2, 0xa2, 0xa2, 0xa2, 0xa2, 0xa2,
    0xa1, 0xa1, 0xa1, 0xa1, 0xa1, 0xa1, 0x5e, 0x5e, 0xa2, 0xa2, 0xa2, 0xa2, 0xa2, 0xa2, 0x5e, 0x5e,
    0x15, 0xa1, 0x15, 0xa1, 0x15, 0xa1, 0x15, 0xa1, 0x5e, 0xa2, 0x5e, 0xa2, 0x5e, 0xa2, 0x5e, 0xa2,
    0xa3, 0xa3, 0xa4, 0xa4, 0xa4, 0xa4, 0xa5, 0xa5, 0xa6, 0xa6, 0xa7, 0xa7, 0xa8, 0xa8, 0x5e, 0x5e,
    0xa1, 0xa1, 0xa1, 0xa1, 0xa1, 0xa1, 0xa1, 0xa1, 0xa9, 0xa9, 0xa9, 0xa9, 0xa9, 0xa9, 0xa9, 0xa9,
    0xa1, 0xa1, 0x15, 0xaa, 0x15, 0x5e, 0x15, 0x15, 0xa2, 0xa2, 0xab, 0xab, 0xac, 0x0b, 0xad, 0x0b,
    0x0b, 0x0b, 0x15, 0xaa, 0x15, 0x5e, 0x15, 0x15, 0xae, 0xae, 0xae, 0xae, 0xac, 0x0b, 0x0b, 0x0b,
    0xa1, 0xa1, 0x15, 0x15, 0x5e, 0x5e, 0x15, 0x15, 0xa2, 0xa2, 0xaf, 0xaf, 0x5e, 0x0b, 0x0b, 0x0b,
    0xa1, 0xa1, 0x15, 0x15, 0x15, 0x71, 0x15, 0x15, 0xa2, 0xa2, 0xb0, 0xb0, 0x75, 0x0b, 0x0b, 0x0b,
    0x5e, 0x5e, 0x15, 0xaa, 0x15, 0x5e, 0x15, 0x15, 0xb1, 0xb1, 0xb2, 0xb2, 0xac, 0x0b, 0x0b, 0x5e,
    0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x11, 0x11, 0x11, 0xb3, 0x85,
    0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x03, 0x03, 0x10, 0x14, 0x05, 0x10, 0x10, 0x14, 0x05, 0x10,
    0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0xb4, 0xb5, 0x11, 0x11, 0x11, 0x11, 0x11, 0x02,
    0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x10, 0x14, 0x03, 0x03, 0x03, 0x03, 0x0c,
    0x0c, 0x03, 0x03, 0x03, 0x07, 0x05, 0x06, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03,
    0x03, 0x03, 0x07, 0x03, 0x0c, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x02,
    0x11, 0x11, 0x11, 0x11, 0x11, 0xb6, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,
    0x12, 0x5a, 0x5e, 0x5e, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x07, 0x07, 0x07, 0x05, 0x06, 0x5a,
    0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x07, 0x07, 0x07, 0x05, 0x06, 0x5e,
    0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5e, 0x5e, 0x5e,
    0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04,
    0xb6, 0xb6, 0xb6, 0xb6, 0xb6, 0xb6, 0xb6, 0xb6, 0xb6, 0xb6, 0xb6, 0xb6, 0xb6, 0xb6, 0xb6, 0xb6,
    0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x79, 0x79, 0x79,
    0x79, 0x5c, 0x79, 0x79, 0x79, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c,
    0x0e, 0x0e, 0x19, 0x0e, 0x0e, 0x0e, 0x0e, 0x19, 0x0e, 0x0e, 0x15, 0x19, 0x19, 0x19, 0x15, 0x15,
    0x19, 0x19, 0x19, 0x15, 0x0e, 0x19, 0x0e, 0x0e, 0x07, 0x19, 0x19, 0x19, 0x19, 0x19, 0x0e, 0x0e,
    0x0e, 0x0e, 0x0e, 0x0e, 0x19, 0x0e, 0xb7, 0x0e, 0x19, 0x0e, 0xb8, 0xb9, 0x19, 0x19, 0x0e, 0x15,
    0x19, 0x19, 0xba, 0x19, 0x15, 0x0f, 0x0f, 0x0f, 0x0f, 0x15, 0x0e, 0x0e, 0x15, 0x15, 0x19, 0x19,
    0x07, 0x07, 0x07, 0x07, 0x07, 0x19, 0x15, 0x15, 0x15, 0x15, 0x0e, 0x07, 0x0e, 0x0e, 0xbb, 0x78,
    0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12,
    0xbc, 0xbc, 0xbc, 0xbc, 0xbc, 0xbc, 0xbc, 0xbc, 0xbc, 0xbc, 0xbc, 0xbc, 0xbc, 0xbc, 0xbc, 0xbc,
    0xbd, 0xbd, 0xbd, 0xbd, 0xbd, 0xbd, 0xbd, 0xbd, 0xbd, 0xbd, 0xbd, 0xbd, 0xbd, 0xbd, 0xbd, 0xbd,
    0x92, 0x92, 0x92, 0x17, 0x18, 0x92, 0x92, 0x92, 0x92, 0x12, 0x0e, 0x0e, 0x5e, 0x5e, 0x5e, 0x5e,
    0x07, 0x07, 0x07, 0x07, 0x07, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x07, 0x07, 0x0e, 0x0e, 0x0e, 0x0e,
    0x07, 0x0e, 0x0e, 0x07, 0x0e, 0x0e, 0x07, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x07, 0x0e,
    0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x07, 0x07,
    0x0e, 0x0e, 0x07, 0x0e, 0x07, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e,
    0x0e, 0x0e, 0x0e, 0x0e, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
    0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
    0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x05, 0x06, 0x05, 0x06, 0x0e, 0x0e, 0x0e, 0x0e,
    0x07, 0x07, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x05, 0x06, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e,
    0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78,
    0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78,
    0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x0e, 0x07, 0x0e, 0x0e, 0x0e,
    0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x78, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x07, 0x07, 0x07, 0x07, 0x07,
    0x07, 0x07, 0x07, 0x07, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e,
    0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x07, 0x07, 0x07, 0x07,
    0x07, 0x07, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e,
    0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e,
    0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e,
    0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x78, 0x78, 0x78, 0x78,
    0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0xbe, 0xbe, 0xbe, 0xbe, 0xbe, 0xbe, 0xbe, 0xbe, 0xbe, 0xbe,
    0xbe, 0xbe, 0xbe, 0xbe, 0xbe, 0xbe, 0xbe, 0xbe, 0xbe, 0xbe, 0xbe, 0xbe, 0xbe, 0xbe, 0xbe, 0xbe,
    0xbf, 0xbf, 0xbf, 0xbf, 0xbf, 0xbf, 0xbf, 0xbf, 0xbf, 0xbf, 0xbf, 0xbf, 0xbf, 0xbf, 0xbf, 0xbf,
    0xbf, 0xbf, 0xbf, 0xbf, 0xbf, 0xbf, 0xbf, 0xbf, 0xbf, 0xbf, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12,
    0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x07, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e,
    0x0e, 0x07, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e,
    0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
    0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x07,
    0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x78, 0x0e, 0x0e, 0x0e,
    0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x05, 0x06, 0x05, 0x06, 0x05, 0x06, 0x05, 0x06,
    0x05, 0x06, 0x05, 0x06, 0x05, 0x06, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12,
    0x12, 0x12, 0x12, 0x12, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e,
    0x07, 0x07, 0x07, 0x07, 0x07, 0x05, 0x06, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
    0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x05, 0x06, 0x05, 0x06, 0x05, 0x06, 0x05, 0x06, 0x05, 0x06,
    0x07, 0x07, 0x07, 0x05, 0x06, 0x05, 0x06, 0x05, 0x06, 0x05, 0x06, 0x05, 0x06, 0x05, 0x06, 0x05,
    0x06, 0x05, 0x06, 0x05, 0x06, 0x05, 0x06, 0x05, 0x06, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
    0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x05, 0x06, 0x05, 0x06, 0x07, 0x07, 0x07, 0x07,
    0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x05, 0x06, 0x07, 0x07,
    0x07, 0x07, 0x07, 0x07, 0x07, 0x0e, 0x0e, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x0e, 0x0e, 0x0e,
    0x0e, 0x0e, 0x0e, 0x0e, 0x5e, 0x5e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e,
    0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x5e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e,
    0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x5e,
    0x7e, 0x7e, 0x7e, 0x7e, 0x7e, 0x7e, 0x7e, 0x7e, 0x7e, 0x7e, 0x7e, 0x7e, 0x7e, 0x7e, 0x7e, 0x5e,
    0x17, 0x18, 0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0x17, 0x18, 0x17, 0x18, 0x17, 0x18, 0xc5, 0xc6, 0xc7,
    0xc8, 0x15, 0x17, 0x18, 0x15, 0x17, 0x18, 0x15, 0x15, 0x15, 0x15, 0x15, 0x5a, 0x5a, 0xc9, 0xc9,
    0x17, 0x18, 0x17, 0x18, 0x15, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x17, 0x18, 0x17, 0x18, 0x5c,
    0x5c, 0x5c, 0x17, 0x18, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x03, 0x03, 0x03, 0x03, 0x12, 0x03, 0x03,
    0xca, 0xca, 0xca, 0xca, 0xca, 0xca, 0xca, 0xca, 0xca, 0xca, 0xca, 0xca, 0xca, 0xca, 0xca, 0xca,
    0xca, 0xca, 0xca, 0xca, 0xca, 0xca, 0x5e, 0xca, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0xca, 0x5e, 0x5e,
    0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5a,
    0x7d, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5c,
    0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e,
    0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x5e, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x5e,
    0x03, 0x03, 0x10, 0x14, 0x10, 0x14, 0x03, 0x03, 0x03, 0x10, 0x14, 0x03, 0x10, 0x14, 0x03, 0x03,
    0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x08, 0x03, 0x03, 0x08, 0x03, 0x10, 0x14, 0x03, 0x03,
    0x10, 0x14, 0x05, 0x06, 0x05, 0x06, 0x05, 0x06, 0x05, 0x06, 0x03, 0x03, 0x03, 0x03, 0x03, 0x5b,
    0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x08, 0x08, 0x03, 0x03, 0x03, 0x03,
    0x08, 0x03, 0x05, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03,
    0x0e, 0x0e, 0x03, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e,
    0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x5e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e,
    0x0e, 0x0e, 0x0e, 0x0e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e,
    0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e,
    0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x5e, 0x5e, 0x5e, 0x5e,
    0x02, 0x03, 0x03, 0x03, 0x0e, 0x5a, 0x0f, 0x92, 0x05, 0x06, 0x05, 0x06, 0x05, 0x06, 0x05, 0x06,
    0x05, 0x06, 0x0e, 0x0e, 0x05, 0x06, 0x05, 0x06, 0x05, 0x06, 0x05, 0x06, 0x08, 0x05, 0x06, 0x06,
    0x0e, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x5c, 0x5c, 0x5c, 0x5c, 0x89, 0x89,
    0x08, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x0e, 0x0e, 0x92, 0x92, 0x92, 0x5a, 0x0f, 0x03, 0x0e, 0x0e,
    0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x5e, 0x5e, 0x5c, 0x5c, 0x0b, 0x0b, 0x5a, 0x5a, 0x0f,
    0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x03, 0x5a, 0x5a, 0x5a, 0x0f,
    0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f,
    0x78, 0x78, 0x8b, 0x8b, 0x8b, 0x8b, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78,
    0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x0e, 0x0e, 0x5e,
    0x8b, 0x8b, 0x8b, 0x8b, 0x8b, 0x8b, 0x8b, 0x8b, 0x8b, 0x8b, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78,
    0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x8b, 0x8b, 0x8b, 0x8b, 0x8b, 0x8b, 0x8b, 0x8b,
    0x0e, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12,
    0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x0e, 0x0e, 0x0e, 0x78,
    0x78, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12,
    0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x0e, 0x0e, 0x0e, 0x0e,
    0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x0e, 0x0e, 0x0e, 0x0e, 0x78, 0x78, 0x78, 0x78, 0x78,
    0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x0e, 0x0e,
    0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x0e,
    0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x5a, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f,
    0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x5a, 0x03, 0x03, 0x03,
    0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x0f, 0x0f, 0x5e, 0x5e, 0x5e, 0x5e,
    0x17, 0x18, 0x17, 0x18, 0x17, 0x18, 0x17, 0x18, 0x17, 0x18, 0x17, 0x18, 0x17, 0x18, 0x0f, 0x5c,
    0x79, 0x79, 0x79, 0x03, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x03, 0x5b,
    0x17, 0x18, 0x17, 0x18, 0x17, 0x18, 0x17, 0x18, 0x17, 0x18, 0x17, 0x18, 0x5a, 0x5a, 0x5c, 0x5c,
    0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92,
    0x5c, 0x5c, 0x7d, 0x7d, 0x7d, 0x7d, 0x7d, 0x7d, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e,
    0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b,
    0x0b, 0x0b, 0x17, 0x18, 0x17, 0x18, 0x17, 0x18, 0x17, 0x18, 0x17, 0x18, 0x17, 0x18, 0x17, 0x18,
    0x15, 0x15, 0x17, 0x18, 0x17, 0x18, 0x17, 0x18, 0x17, 0x18, 0x17, 0x18, 0x17, 0x18, 0x17, 0x18,
    0x5a, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x17, 0x18, 0x17, 0x18, 0xcb, 0x17, 0x18,
    0x17, 0x18, 0x17, 0x18, 0x17, 0x18, 0x17, 0x18, 0x5b, 0xcc, 0xcc, 0x17, 0x18, 0xcd, 0x15, 0x0f,
    0x17, 0x18, 0x17, 0x18, 0xce, 0x15, 0x17, 0x18, 0x17, 0x18, 0x17, 0x18, 0x17, 0x18, 0x17, 0x18,
    0x17, 0x18, 0x17, 0x18, 0x17, 0x18, 0x17, 0x18, 0x17, 0x18, 0xcf, 0xd0, 0xd1, 0xd2, 0xcf, 0x15,
    0xd3, 0xd4, 0xd5, 0xd6, 0x17, 0x18, 0x17, 0x18, 0x17, 0x18, 0x17, 0x18, 0x17, 0x18, 0x17, 0x18,
    0x5e, 0x5e, 0x17, 0x18, 0xd7, 0xd8, 0xd9, 0x17, 0x18, 0x17, 0x18, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e,
    0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x17, 0x18, 0x0f, 0x5a, 0x5a, 0x15, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f,
    0x0f, 0x0f, 0x5c, 0x0f, 0x0f, 0x0f, 0x5c, 0x0f, 0x0f, 0x0f, 0x0f, 0x5c, 0x0f, 0x0f, 0x0f, 0x0f,
    0x0f, 0x0f, 0x0f, 0x89, 0x89, 0x5c, 0x5c, 0x89, 0x0e, 0x0e, 0x0e, 0x0e, 0x5c, 0x5e, 0x5e, 0x5e,
    0x8b, 0x8b, 0x8b, 0x8b, 0x8b, 0x8b, 0x78, 0x78, 0x04, 0x0e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e,
    0x0f, 0x0f, 0x0f, 0x0f, 0x03, 0x03, 0x03, 0x03, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e,
    0x89, 0x89, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f,
    0x0f, 0x0f, 0x0f, 0x0f, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89,
    0x89, 0x89, 0x89, 0x89, 0x5c, 0x5c, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x7d, 0x7d,
    0x5c, 0x5c, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x7d, 0x7d, 0x7d, 0x0f, 0x7d, 0x0f, 0x0f, 0x5c,
    0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x7d, 0x7d,
    0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c,
    0x5c, 0x5c, 0x89, 0x89, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x7d,
    0x0f, 0x0f, 0x0f, 0x5c, 0x89, 0x89, 0x5c, 0x5c, 0x5c, 0x5c, 0x89, 0x89, 0x5c, 0x5c, 0x89, 0x89,
    0x89, 0x7d, 0x7d, 0x7d, 0x7d, 0x7d, 0x7d, 0x7d, 0x7d, 0x7d, 0x7d, 0x7d, 0x7d, 0x7d, 0x5e, 0x5a,
    0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x5e, 0x5e, 0x5e, 0x5e, 0x7d, 0x7d,
    0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x5c, 0x5a, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f,
    0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x5e,
    0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x89,
    0x89, 0x5c, 0x5c, 0x89, 0x89, 0x5c, 0x5c, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e,
    0x0f, 0x0f, 0x0f, 0x5c, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x5c, 0x89, 0x5e, 0x5e,
    0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x5e, 0x5e, 0x7d, 0x7d, 0x7d, 0x7d,
    0x5a, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x78, 0x78, 0x78, 0x0f, 0x89, 0x5c, 0x89, 0x0f, 0x0f,
    0x5c, 0x0f, 0x5c, 0x5c, 0x5c, 0x0f, 0x0f, 0x5c, 0x5c, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x5c, 0x5c,
    0x0f, 0x5c, 0x0f, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e,
    0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x0f, 0x0f, 0x5a, 0x7d, 0x7d,
    0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x89, 0x5c, 0x5c, 0x89, 0x89,
    0x7d, 0x7d, 0x0f, 0x5a, 0x5a, 0x89, 0x5c, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e,
    0x5e, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x5e, 0x5e, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x5e,
    0x5e, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e,
    0x15, 0x15, 0x15, 0xda, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0xcc, 0x5a, 0x5a, 0x5a, 0x5a,
    0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x5a, 0x0b, 0x0b, 0x5e, 0x5e, 0x5e, 0x5e,
    0xdb, 0xdb, 0xdb, 0xdb, 0xdb, 0xdb, 0xdb, 0xdb, 0xdb, 0xdb, 0xdb, 0xdb, 0xdb, 0xdb, 0xdb, 0xdb,
    0x0f, 0x0f, 0x0f, 0x89, 0x89, 0x5c, 0x89, 0x89, 0x5c, 0x89, 0x89, 0x7d, 0x89, 0x5c, 0x5e, 0x5e,
    0x0f, 0x0f, 0x0f, 0x0f, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e,
    0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x5e, 0x5e, 0x5e, 0x5e, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f,
    0xdc, 0xdc, 0xdc, 0xdc, 0xdc, 0xdc, 0xdc, 0xdc, 0xdc, 0xdc, 0xdc, 0xdc, 0xdc, 0xdc, 0xdc, 0xdc,
    0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
    0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e,
    0x5e, 0x5e, 0x5e, 0x15, 0x15, 0x15, 0x15, 0x15, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x82, 0x5c, 0x82,
    0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x07, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82,
    0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x7f, 0x82, 0x82, 0x82, 0x82, 0x82, 0x7f, 0x82, 0x7f,
    0x82, 0x82, 0x7f, 0x82, 0x82, 0x7f, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82,
    0x82, 0x82, 0xde, 0xde, 0xde, 0xde, 0xde, 0xde, 0xde, 0xde, 0xde, 0xde, 0xde, 0xde, 0xde, 0xde,
    0xde, 0xde, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f,
    0x7f, 0x7f, 0x7f, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82,
    0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x06, 0x05,
    0x7f, 0x7f, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82,
    0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x84, 0x0e, 0x7f, 0x7f,
    0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x05, 0x06, 0x03, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e,
    0x03, 0x08, 0x08, 0x0c, 0x0c, 0x05, 0x06, 0x05, 0x06, 0x05, 0x06, 0x05, 0x06, 0x05, 0x06, 0x05,
    0x06, 0x05, 0x06, 0x05, 0x06, 0x03, 0x03, 0x05, 0x06, 0x03, 0x03, 0x03, 0x03, 0x0c, 0x0c, 0x0c,
    0x03, 0x03, 0x03, 0x5e, 0x03, 0x03, 0x03, 0x03, 0x08, 0x05, 0x06, 0x05, 0x06, 0x05, 0x06, 0x03,
    0x03, 0x03, 0x07, 0x08, 0x07, 0x07, 0x07, 0x5e, 0x03, 0x04, 0x03, 0x03, 0x5e, 0x5e, 0x5e, 0x5e,
    0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x7f, 0x7f, 0x11,
    0x5e, 0x03, 0x03, 0x03, 0x04, 0x03, 0x03, 0x03, 0x05, 0x06, 0x03, 0x07, 0x03, 0x08, 0x03, 0x03,
    0x0d, 0x0d, 0x0d, 0x0d, 0x0d, 0x0d, 0x0d, 0x0d, 0x0d, 0x0d, 0x0d, 0x05, 0x07, 0x06, 0x07, 0x05,
    0x06, 0x03, 0x05, 0x06, 0x03, 0x03, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f,
    0x5a, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f,
    0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x5a, 0x5a,
    0x5e, 0x5e, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x5e, 0x5e, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f,
    0x5e, 0x5e, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x5e, 0x5e, 0x0f, 0x0f, 0x0f, 0x5e, 0x5e, 0x5e,
    0x04, 0x04, 0x07, 0x0b, 0x0e, 0x04, 0x04, 0x5e, 0x0e, 0x07, 0x07, 0x07, 0x07, 0x0e, 0x0e, 0x5e,
    0xb6, 0xb6, 0xb6, 0xb6, 0xb6, 0xb6, 0xb6, 0xb6, 0xb6, 0x11, 0x11, 0x11, 0x0e, 0x0e, 0xb6, 0xb6,
    0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x5e, 0x0f, 0x0f, 0x0f,
    0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x5e, 0x0f, 0x0f, 0x5e, 0x0f,
    0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e,
    0x7d, 0x03, 0x7d, 0x5e, 0x5e, 0x5e, 0x5e, 0x8b, 0x8b, 0x8b, 0x8b, 0x8b, 0x8b, 0x8b, 0x8b, 0x8b,
    0x8b, 0x8b, 0x8b, 0x8b, 0x8b, 0x8b, 0x8b, 0x8b, 0x8b, 0x8b, 0x8b, 0x8b, 0x8b, 0x8b, 0x8b, 0x8b,
    0x8b, 0x8b, 0x8b, 0x8b, 0x5e, 0x5e, 0x5e, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78,
    0xdf, 0xdf, 0xdf, 0xdf, 0xdf, 0xdf, 0xdf, 0xdf, 0xdf, 0xdf, 0xdf, 0xdf, 0xdf, 0xdf, 0xdf, 0xdf,
    0xdf, 0xdf, 0xdf, 0xdf, 0xdf, 0x12, 0x12, 0x12, 0x12, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e,
    0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x12, 0x12, 0x0e, 0x78, 0x78, 0x5e,
    0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x5e, 0x5e, 0x5e,
    0x0e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e,
    0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x5c, 0x5e, 0x5e,
    0x5c, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12,
    0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x5e, 0x5e, 0x5e, 0x5e,
    0x8b, 0x8b, 0x8b, 0x8b, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x0f, 0x0f, 0x0f,
    0x0f, 0x92, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x92, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e,
    0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e,
    0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x5e, 0x7d,
    0x0f, 0x0f, 0x0f, 0x0f, 0x5e, 0x5e, 0x5e, 0x5e, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f,
    0x7d, 0x92, 0x92, 0x92, 0x92, 0x92, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e,
    0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0,
    0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe1, 0xe1, 0xe1, 0xe1, 0xe1, 0xe1, 0xe1, 0xe1,
    0xe1, 0xe1, 0xe1, 0xe1, 0xe1, 0xe1, 0xe1, 0xe1, 0xe1, 0xe1, 0xe1, 0xe1, 0xe1, 0xe1, 0xe1, 0xe1,
    0xe0, 0xe0, 0xe0, 0xe0, 0x5e, 0x5e, 0x5e, 0x5e, 0xe1, 0xe1, 0xe1, 0xe1, 0xe1, 0xe1, 0xe1, 0xe1,
    0xe1, 0xe1, 0xe1, 0xe1, 0xe1, 0xe1, 0xe1, 0xe1, 0xe1, 0xe1, 0xe1, 0xe1, 0x5e, 0x5e, 0x5e, 0x5e,
    0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e,
    0x0f, 0x0f, 0x0f, 0x0f, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x7d,
    0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x7f, 0x7f, 0x82, 0x7f, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82,
    0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x7f, 0x82, 0x82, 0x7f, 0x7f, 0x7f, 0x82, 0x7f, 0x7f, 0x82,
    0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x7f, 0x81, 0xe2, 0xe2, 0xe2, 0xe2, 0xe2, 0xe2, 0xe2, 0xe2,
    0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x87, 0x87, 0xe2, 0xe2, 0xe2, 0xe2, 0xe2, 0xe2, 0xe2,
    0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x7f,
    0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0xe2, 0xe2, 0xe2, 0xe2, 0xe2, 0xe2, 0xe2, 0xe2, 0xe2,
    0x82, 0x82, 0x82, 0x7f, 0x82, 0x82, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0xe2, 0xe2, 0xe2, 0xe2, 0xe2,
    0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0xe2, 0xe2, 0xe2, 0xe2, 0xe2, 0xe2, 0x7f, 0x7f, 0x7f, 0x03,
    0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x81,
    0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x7f, 0x7f, 0x7f, 0x7f, 0xe2, 0xe2, 0x82, 0x82,
    0xe2, 0xe2, 0xe2, 0xe2, 0xe2, 0xe2, 0xe2, 0xe2, 0xe2, 0xe2, 0xe2, 0xe2, 0xe2, 0xe2, 0xe2, 0xe2,
    0x7f, 0x7f, 0xe2, 0xe2, 0xe2, 0xe2, 0xe2, 0xe2, 0xe2, 0xe2, 0xe2, 0xe2, 0xe2, 0xe2, 0xe2, 0xe2,
    0x82, 0x5c, 0x5c, 0x5c, 0x7f, 0x5c, 0x5c, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x5c, 0x5c, 0x5c, 0x5c,
    0x82, 0x82, 0x82, 0x82, 0x7f, 0x82, 0x82, 0x82, 0x7f, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82,
    0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x7f, 0x7f, 0x5c, 0x5c, 0x5c, 0x7f, 0x7f, 0x7f, 0x7f, 0x5c,
    0xe2, 0xe2, 0xe2, 0xe2, 0xe2, 0xe2, 0xe2, 0xe2, 0xe2, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f,
    0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f,
    0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0xe2, 0xe2, 0x81,
    0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0xe2, 0xe2, 0xe2,
    0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x87, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82,
    0x82, 0x82, 0x82, 0x82, 0x82, 0x5c, 0x5c, 0x7f, 0x7f, 0x7f, 0x7f, 0xe2, 0xe2, 0xe2, 0xe2, 0xe2,
    0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f,
    0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x7f, 0x7f, 0x7f, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03,
    0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x7f, 0x7f, 0xe2, 0xe2, 0xe2, 0xe2, 0xe2, 0xe2, 0xe2, 0xe2,
    0x82, 0x82, 0x82, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0xe2, 0xe2, 0xe2, 0xe2, 0xe2, 0xe2, 0xe2, 0xe2,
    0x82, 0x82, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x81, 0x81, 0x81, 0x81, 0x7f, 0x7f, 0x7f,
    0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0xe2, 0xe2, 0xe2, 0xe2, 0xe2, 0xe2, 0xe2,
    0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f,
    0xe3, 0xe3, 0xe3, 0xe3, 0xe3, 0xe3, 0xe3, 0xe3, 0xe3, 0xe3, 0xe3, 0xe3, 0xe3, 0xe3, 0xe3, 0xe3,
    0xe3, 0xe3, 0xe3, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f,
    0xe4, 0xe4, 0xe4, 0xe4, 0xe4, 0xe4, 0xe4, 0xe4, 0xe4, 0xe4, 0xe4, 0xe4, 0xe4, 0xe4, 0xe4, 0xe4,
    0xe4, 0xe4, 0xe4, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0xe2, 0xe2, 0xe2, 0xe2, 0xe2, 0xe2,
    0x82, 0x82, 0x82, 0x82, 0x5c, 0x5c, 0x5c, 0x5c, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f,
    0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f,
    0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x7f,
    0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x7f, 0x5c, 0x5c, 0x80, 0x7f, 0x7f,
    0x82, 0x82, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f,
    0xe2, 0xe2, 0xe2, 0xe2, 0xe2, 0xe2, 0xe2, 0x82, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f,
    0x5c, 0xe2, 0xe2, 0xe2, 0xe2, 0x81, 0x81, 0x81, 0x81, 0x81, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f,
    0x82, 0x82, 0x82, 0x82, 0x82, 0xe2, 0xe2, 0xe2, 0xe2, 0xe2, 0xe2, 0xe2, 0x7f, 0x7f, 0x7f, 0x7f,
    0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f,
    0x89, 0x5c, 0x89, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f,
    0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c,
    0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x7d, 0x7d, 0x7d, 0x7d, 0x7d, 0x7d, 0x7d, 0x5e, 0x5e,
    0x5e, 0x5e, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12,
    0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a,
    0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5c,
    0x89, 0x89, 0x89, 0x5c, 0x5c, 0x5c, 0x5c, 0x89, 0x89, 0x5c, 0x5c, 0x7d, 0x7d, 0xb3, 0x7d, 0x7d,
    0x7d, 0x7d, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0xb3, 0x5e, 0x5e,
    0x5c, 0x5c, 0x5c, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f,
    0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x89, 0x5c, 0x5c, 0x5c,
    0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5e, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a,
    0x7d, 0x7d, 0x7d, 0x7d, 0x0f, 0x89, 0x89, 0x0f, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e,
    0x0f, 0x0f, 0x0f, 0x5c, 0x7d, 0x7d, 0x0f, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e,
    0x0f, 0x0f, 0x0f, 0x89, 0x89, 0x89, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x89,
    0x89, 0x0f, 0x0f, 0x0f, 0x0f, 0x7d, 0x7d, 0x7d, 0x7d, 0x5c, 0x5c, 0x5c, 0x5c, 0x7d, 0x89, 0x5c,
    0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x0f, 0x7d, 0x0f, 0x7d, 0x7d, 0x7d,
    0x5e, 0x8b, 0x8b, 0x8b, 0x8b, 0x8b, 0x8b, 0x8b, 0x8b, 0x8b, 0x8b, 0x8b, 0x8b, 0x8b, 0x8b, 0x8b,
    0x8b, 0x8b, 0x8b, 0x8b, 0x8b, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e,
    0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x89, 0x89, 0x89, 0x5c,
    0x5c, 0x5c, 0x89, 0x89, 0x5c, 0x89, 0x5c, 0x5c, 0x7d, 0x7d, 0x7d, 0x7d, 0x7d, 0x7d, 0x5c, 0x5e,
    0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x5e, 0x0f, 0x5e, 0x0f, 0x0f, 0x0f, 0x0f, 0x5e, 0x0f,
    0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x5e, 0x0f,
    0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x7d, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e,
    0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x5c,
    0x89, 0x89, 0x89, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e,
    0x5c, 0x5c, 0x89, 0x89, 0x5e, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x5e, 0x5e, 0x0f,
    0x0f, 0x5e, 0x0f, 0x0f, 0x5e, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x5e, 0x5c, 0x5c, 0x0f, 0x89, 0x89,
    0x5c, 0x89, 0x89, 0x89, 0x89, 0x5e, 0x5e, 0x89, 0x89, 0x5e, 0x5e, 0x89, 0x89, 0x89, 0x5e, 0x5e,
    0x0f, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x89, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x0f, 0x0f, 0x0f,
    0x0f, 0x0f, 0x89, 0x89, 0x5e, 0x5e, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5e, 0x5e, 0x5e,
    0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e,
    0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x89, 0x89, 0x89, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c,
    0x89, 0x89, 0x5c, 0x5c, 0x5c, 0x89, 0x5c, 0x0f, 0x0f, 0x0f, 0x0f, 0x7d, 0x7d, 0x7d, 0x7d, 0x7d,
    0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x7d, 0x7d, 0x5e, 0x7d, 0x5c, 0x0f,
    0x0f, 0x0f, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e,
    0x89, 0x89, 0x89, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x89, 0x5c, 0x89, 0x89, 0x89, 0x89, 0x5c,
    0x5c, 0x89, 0x5c, 0x5c, 0x0f, 0x0f, 0x7d, 0x0f, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e,
    0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x89,
    0x89, 0x89, 0x5c, 0x5c, 0x5c, 0x5c, 0x5e, 0x5e, 0x89, 0x89, 0x89, 0x89, 0x5c, 0x5c, 0x89, 0x5c,
    0x5c, 0x7d, 0x7d, 0x7d, 0x7d, 0x7d, 0x7d, 0x7d, 0x7d, 0x7d, 0x7d, 0x7d, 0x7d, 0x7d, 0x7d, 0x7d,
    0x7d, 0x7d, 0x7d, 0x7d, 0x7d, 0x7d, 0x7d, 0x7d, 0x0f, 0x0f, 0x0f, 0x0f, 0x5c, 0x5c, 0x5e, 0x5e,
    0x89, 0x89, 0x89, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x89, 0x89, 0x5c, 0x89, 0x5c,
    0x5c, 0x7d, 0x7d, 0x7d, 0x0f, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e,
    0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x5e, 0x5e, 0x5e,
    0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x5c, 0x89, 0x5c, 0x89, 0x89,
    0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x89, 0x5c, 0x0f, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e,
    0x89, 0x89, 0x5c, 0x5c, 0x5c, 0x5c, 0x89, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5e, 0x5e, 0x5e, 0x5e,
    0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8b, 0x8b, 0x7d, 0x7d, 0x7d, 0x78,
    0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x89, 0x5c, 0x5c, 0x7d, 0x5e, 0x5e, 0x5e, 0x5e,
    0x8b, 0x8b, 0x8b, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x0f,
    0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x5e, 0x5e, 0x0f, 0x5e, 0x5e, 0x0f, 0x0f, 0x0f, 0x0f,
    0x0f, 0x0f, 0x0f, 0x0f, 0x5e, 0x0f, 0x0f, 0x5e, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f,
    0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x5e, 0x89, 0x89, 0x5e, 0x5e, 0x5c, 0x5c, 0x89, 0x5c, 0x0f,
    0x89, 0x0f, 0x89, 0x5c, 0x7d, 0x7d, 0x7d, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e,
    0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x5e, 0x5e, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f,
    0x0f, 0x89, 0x89, 0x89, 0x5c, 0x5c, 0x5c, 0x5c, 0x5e, 0x5e, 0x5c, 0x5c, 0x89, 0x89, 0x89, 0x89,
    0x5c, 0x0f, 0x7d, 0x0f, 0x89, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e,
    0x0f, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x8c, 0x8c, 0x5c, 0x5c, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f,
    0x0f, 0x0f, 0x0f, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x89, 0x0f, 0x5c, 0x5c, 0x5c, 0x5c, 0x7d,
    0x7d, 0x7d, 0x7d, 0x7d, 0x7d, 0x7d, 0x7d, 0x5c, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e,
    0x0f, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x89, 0x89, 0x5c, 0x5c, 0x5c, 0x0f, 0x0f, 0x0f, 0x0f,
    0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c,
    0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x89, 0x5c, 0x5c, 0x7d, 0x7d, 0x7d, 0x0f, 0x7d, 0x7d,
    0x7d, 0x7d, 0x7d, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e,
    0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5e, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x89, 0x8c,
    0x0f, 0x7d, 0x7d, 0x7d, 0x7d, 0x7d, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e,
    0x7d, 0x7d, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f,
    0x5e, 0x5e, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c,
    0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5e, 0x89, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c,
    0x5c, 0x89, 0x5c, 0x5c, 0x89, 0x5c, 0x5c, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e,
    0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x5e, 0x0f, 0x0f, 0x5e, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f,
    0x0f, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5e, 0x5e, 0x5e, 0x5c, 0x5e, 0x5c, 0x5c, 0x5e, 0x5c,
    0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x0f, 0x5c, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e,
    0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x5e, 0x0f, 0x0f, 0x5e, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f,
    0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x89, 0x89, 0x89, 0x89, 0x89, 0x5e,
    0x5c, 0x5c, 0x5e, 0x89, 0x89, 0x5c, 0x89, 0x5c, 0x0f, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e,
    0x0f, 0x0f, 0x0f, 0x5c, 0x5c, 0x89, 0x89, 0x7d, 0x7d, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e,
    0x8b, 0x8b, 0x8b, 0x8b, 0x8b, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x04, 0x04, 0x04,
    0x04, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e,
    0x0e, 0x0e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x7d,
    0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92,
    0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x5e,
    0x7d, 0x7d, 0x7d, 0x7d, 0x7d, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e,
    0xb3, 0xb3, 0xb3, 0xb3, 0xb3, 0xb3, 0xb3, 0xb3, 0xb3, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e,
    0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x7d, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e,
    0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x7d, 0x7d, 0x7d, 0x7d, 0x7d, 0x78, 0x78, 0x78, 0x78,
    0x5a, 0x5a, 0x5a, 0x5a, 0x7d, 0x78, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e,
    0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x5e, 0x8b, 0x8b, 0x8b, 0x8b, 0x8b,
    0x8b, 0x8b, 0x5e, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f,
    0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x0f, 0x0f, 0x0f,
    0x8b, 0x8b, 0x8b, 0x8b, 0x8b, 0x8b, 0x8b, 0x7d, 0x7d, 0x7d, 0x7d, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e,
    0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x5e, 0x5e, 0x5e, 0x5e, 0x5c,
    0x0f, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89,
    0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89,
    0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5c,
    0x5c, 0x5c, 0x5c, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a,
    0x5a, 0x5a, 0x03, 0x5a, 0x5c, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e,
    0x89, 0x89, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e,
    0x0f, 0x0f, 0x0f, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e,
    0x5e, 0x5e, 0x5e, 0x5e, 0x0f, 0x0f, 0x0f, 0x0f, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e,
    0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x5e, 0x5e, 0x78, 0x5c, 0x5c, 0x7d,
    0x11, 0x11, 0x11, 0x11, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e,
    0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e,
    0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x5e, 0x5e, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78,
    0x78, 0x78, 0x78, 0x78, 0x78, 0x89, 0x89, 0x5c, 0x5c, 0x5c, 0x78, 0x78, 0x78, 0x89, 0x89, 0x89,
    0x89, 0x89, 0x89, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c,
    0x5c, 0x5c, 0x5c, 0x78, 0x78, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x78, 0x78, 0x78, 0x78,
    0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x5c, 0x5c, 0x5c, 0x5c, 0x78, 0x78,
    0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e,
    0x0e, 0x0e, 0x5c, 0x5c, 0x5c, 0x0e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e,
    0x8b, 0x8b, 0x8b, 0x8b, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e,
    0x8b, 0x8b, 0x8b, 0x8b, 0x8b, 0x8b, 0x8b, 0x8b, 0x8b, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e,
    0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19,
    0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15,
    0x15, 0x15, 0x15, 0x15, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19,
    0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x15, 0x15,
    0x15, 0x15, 0x15, 0x15, 0x15, 0x5e, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15,
    0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19,
    0x19, 0x19, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15,
    0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x19, 0x5e, 0x19, 0x19,
    0x5e, 0x5e, 0x19, 0x5e, 0x5e, 0x19, 0x19, 0x5e, 0x5e, 0x19, 0x19, 0x19, 0x19, 0x5e, 0x19, 0x19,
    0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x15, 0x15, 0x15, 0x15, 0x5e, 0x15, 0x5e, 0x15, 0x15, 0x15,
    0x15, 0x15, 0x15, 0x15, 0x5e, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15,
    0x15, 0x15, 0x15, 0x15, 0x19, 0x19, 0x5e, 0x19, 0x19, 0x19, 0x19, 0x5e, 0x5e, 0x19, 0x19, 0x19,
    0x19, 0x19, 0x19, 0x19, 0x19, 0x5e, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x5e, 0x15, 0x15,
    0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x19, 0x19, 0x5e, 0x19, 0x19, 0x19, 0x19, 0x5e,
    0x19, 0x19, 0x19, 0x19, 0x19, 0x5e, 0x19, 0x5e, 0x5e, 0x5e, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19,
    0x19, 0x5e, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15,
    0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x19, 0x19, 0x19, 0x19,
    0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15,
    0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x5e, 0x5e, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19,
    0x19, 0xe5, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15,
    0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x07, 0x15, 0x15, 0x15, 0x15,
    0x15, 0x15, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19,
    0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0xe5, 0x15, 0x15, 0x15, 0x15,
    0x15, 0x15, 0x15, 0x15, 0x15, 0x07, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x19, 0x19, 0x19, 0x19,
    0x19, 0x19, 0x19, 0x19, 0x19, 0xe5, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15,
    0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x07,
    0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19,
    0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0xe5,
    0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x07, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15,
    0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0xe5, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15,
    0x15, 0x15, 0x15, 0x07, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x19, 0x15, 0x5e, 0x5e, 0x09, 0x09,
    0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
    0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x78, 0x78, 0x78, 0x78, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c,
    0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x78, 0x78, 0x78,
    0x78, 0x78, 0x78, 0x78, 0x78, 0x5c, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78,
    0x78, 0x78, 0x78, 0x78, 0x5c, 0x78, 0x78, 0x7d, 0x7d, 0x7d, 0x7d, 0x7d, 0x5e, 0x5e, 0x5e, 0x5e,
    0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c,
    0x5e, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c,
    0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5e, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c,
    0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5e, 0x5e, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c,
    0x5c, 0x5c, 0x5e, 0x5c, 0x5c, 0x5e, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e,
    0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5e, 0x5e,
    0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x5e, 0x5e, 0x5e, 0x5e, 0x0f, 0x78,
    0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x5c, 0x5c, 0x5c, 0x5c,
    0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x04,
    0x82, 0x82, 0x82, 0x82, 0x82, 0x7f, 0x7f, 0xe2, 0xe2, 0xe2, 0xe2, 0xe2, 0xe2, 0xe2, 0xe2, 0xe2,
    0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f,
    0xe6, 0xe6, 0xe6, 0xe6, 0xe6, 0xe6, 0xe6, 0xe6, 0xe6, 0xe6, 0xe6, 0xe6, 0xe6, 0xe6, 0xe6, 0xe6,
    0xe6, 0xe6, 0xe7, 0xe7, 0xe7, 0xe7, 0xe7, 0xe7, 0xe7, 0xe7, 0xe7, 0xe7, 0xe7, 0xe7, 0xe7, 0xe7,
    0xe7, 0xe7, 0xe7, 0xe7, 0xe7, 0xe7, 0xe7, 0xe7, 0xe7, 0xe7, 0xe7, 0xe7, 0xe7, 0xe7, 0xe7, 0xe7,
    0xe7, 0xe7, 0xe7, 0xe7, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x86, 0x7f, 0x7f, 0x7f, 0x7f,
    0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x7f, 0x7f, 0x7f, 0x7f, 0x81, 0x81,
    0x7f, 0xe2, 0xe2, 0xe2, 0xe2, 0xe2, 0xe2, 0xe2, 0xe2, 0xe2, 0xe2, 0xe2, 0xe2, 0xe2, 0xe2, 0xe2,
    0xe2, 0xe2, 0xe2, 0xe2, 0xe2, 0xe2, 0xe2, 0xe2, 0xe2, 0xe2, 0xe2, 0xe2, 0x87, 0xe2, 0xe2, 0xe2,
    0x84, 0xe2, 0xe2, 0xe2, 0xe2, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f,
    0xe2, 0xe2, 0xe2, 0xe2, 0xe2, 0xe2, 0xe2, 0xe2, 0xe2, 0xe2, 0xe2, 0xe2, 0xe2, 0xe2, 0x87, 0xe2,
    0xe2, 0xe2, 0xe2, 0xe2, 0xe2, 0xe2, 0xe2, 0xe2, 0xe2, 0xe2, 0xe2, 0xe2, 0xe2, 0xe2, 0x7f, 0x7f,
    0x82, 0x82, 0x82, 0x82, 0x7f, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82,
    0x7f, 0x82, 0x82, 0x7f, 0x82, 0x7f, 0x7f, 0x82, 0x7f, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82,
    0x82, 0x82, 0x82, 0x7f, 0x82, 0x82, 0x82, 0x82, 0x7f, 0x82, 0x7f, 0x82, 0x7f, 0x7f, 0x7f, 0x7f,
    0x7f, 0x7f, 0x82, 0x7f, 0x7f, 0x7f, 0x7f, 0x82, 0x7f, 0x82, 0x7f, 0x82, 0x7f, 0x82, 0x82, 0x82,
    0x7f, 0x82, 0x82, 0x7f, 0x82, 0x7f, 0x7f, 0x82, 0x7f, 0x82, 0x7f, 0x82, 0x7f, 0x82, 0x7f, 0x82,
    0x7f, 0x82, 0x82, 0x7f, 0x82, 0x7f, 0x7f, 0x82, 0x82, 0x82, 0x82, 0x7f, 0x82, 0x82, 0x82, 0x82,
    0x82, 0x82, 0x82, 0x7f, 0x82, 0x82, 0x82, 0x82, 0x7f, 0x82, 0x82, 0x82, 0x82, 0x7f, 0x82, 0x7f,
    0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x7f, 0x82, 0x82, 0x82, 0x82, 0x82,
    0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x7f, 0x7f, 0x7f, 0x7f,
    0x7f, 0x82, 0x82, 0x82, 0x7f, 0x82, 0x82, 0x82, 0x82, 0x82, 0x7f, 0x82, 0x82, 0x82, 0x82, 0x82,
    0x07, 0x07, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f,
    0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x5e,
    0x5e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e,
    0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x0e, 0x0e, 0x0e,
    0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e,
    0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x0e, 0x5e, 0x5e,
    0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78,
    0x78, 0x78, 0x78, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e,
    0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x5e, 0x5e, 0x5e, 0x5e,
    0x78, 0x78, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e,
    0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
    0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e,
    0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e,
    0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x5e, 0x5e,
    0x0e, 0x0e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e,
    0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x5e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e,
    0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x5e, 0x0e, 0x0e, 0x0e,
    0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x5e, 0x5e, 0x5e, 0x0e, 0x0e, 0x0e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e,
    0x0e, 0x0e, 0x0e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e,
    0x0e, 0x0e, 0x0e, 0x5e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e,
    0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e,
    0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0xb6, 0xb6,
    0xb6, 0x11, 0xb6, 0xb6, 0xb6, 0xb6, 0xb6, 0xb6, 0xb6, 0xb6, 0xb6, 0xb6, 0xb6, 0xb6, 0xb6, 0xb6,
    0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,
    0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xb6, 0xb6
};

// Contains Unicode category & bidi class information
unsigned char CharUtil::CategoriesValues[232] = {
    0x0e, 0x8e, 0x8b, 0x18, 0x1a, 0x14, 0x15, 0x19, 0x13, 0x08, 0x20, 0x1b, 0x12, 0x21, 0x1c, 0x24,
    0x16, 0x0f, 0x0a, 0x21, 0x17, 0x21, 0x21, 0x20, 0x21, 0x20, 0x20, 0x21, 0x20, 0x20, 0x20, 0x20,
    0x20, 0x20, 0x20, 0x21, 0x20, 0x20, 0x21, 0x20, 0x21, 0x20, 0x20, 0x20, 0x20, 0x21, 0x20, 0x22,
    0x21, 0x21, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x21, 0x20, 0x20, 0x20, 0x21, 0x21, 0x21, 0x21,
    0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21,
    0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x23, 0x03, 0x05, 0x05, 0x3d, 0x20,
    0x20, 0x20, 0x20, 0x20, 0x21, 0x21, 0x21, 0x21, 0x21, 0x20, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21,
    0x21, 0x21, 0x21, 0x20, 0x21, 0x20, 0x20, 0x21, 0x3c, 0x07, 0x20, 0x21, 0x20, 0x38, 0x21, 0x5d,
    0x53, 0x58, 0x44, 0x59, 0x5a, 0x4f, 0x43, 0x5c, 0x48, 0x26, 0x28, 0x2a, 0x25, 0x20, 0x21, 0x20,
    0x20, 0x21, 0x29, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x20, 0x21, 0x21, 0x21, 0x21,
    0x20, 0x21, 0x20, 0x21, 0x21, 0x21, 0x21, 0x21, 0x21, 0x22, 0x21, 0x20, 0x22, 0x21, 0x20, 0x20,
    0x20, 0x20, 0x20, 0x2f, 0x8c, 0x8d, 0x1d, 0x20, 0x20, 0x20, 0x20, 0x21, 0x29, 0x29, 0x3c, 0x3c,
    0x20, 0x20, 0x20, 0x21, 0x21, 0x20, 0x20, 0x20, 0x20, 0x20, 0x21, 0x20, 0x3b, 0x20, 0x21, 0x20,
    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x21, 0x21, 0x30, 0x31, 0x5b, 0x09,
    0x20, 0x21, 0x4a, 0x40, 0x41, 0x39, 0x40, 0x41
};